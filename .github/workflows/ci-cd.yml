name: Visual Analytics CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # ================================
  # Code Quality & Security Checks
  # ================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for SonarCloud
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy bandit safety
        pip install -r requirements.txt
    
    - name: Code formatting check (Black)
      run: black --check --diff business_intel_scraper/
    
    - name: Linting (Flake8)
      run: flake8 business_intel_scraper/ --max-line-length=100
    
    - name: Type checking (MyPy)
      run: mypy business_intel_scraper/backend/ --ignore-missing-imports
    
    - name: Security check (Bandit)
      run: bandit -r business_intel_scraper/backend/ -f json -o bandit-report.json
    
    - name: Dependency security check (Safety)
      run: safety check --json --output safety-report.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # ================================
  # Backend Testing
  # ================================
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: visual_analytics_test
          POSTGRES_USER: va_test_user
          POSTGRES_PASSWORD: test_password_123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx faker
    
    - name: Set up test environment
      env:
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_NAME: visual_analytics_test
        TEST_DB_USER: va_test_user
        TEST_DB_PASSWORD: test_password_123
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        # Create test database tables
        python -c "
        from business_intel_scraper.database.models import Base
        from sqlalchemy import create_engine
        engine = create_engine('postgresql://va_test_user:test_password_123@localhost:5432/visual_analytics_test')
        Base.metadata.create_all(engine)
        "
    
    - name: Run backend tests with coverage
      env:
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_NAME: visual_analytics_test
        TEST_DB_USER: va_test_user
        TEST_DB_PASSWORD: test_password_123
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        cd business_intel_scraper/backend
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./business_intel_scraper/backend/coverage.xml
        flags: backend
        name: backend-coverage

  # ================================
  # Frontend Testing
  # ================================
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: business_intel_scraper/frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: business_intel_scraper/frontend
      run: npm ci
    
    - name: Run TypeScript check
      working-directory: business_intel_scraper/frontend
      run: npm run type-check
    
    - name: Run linting
      working-directory: business_intel_scraper/frontend
      run: npm run lint
    
    - name: Run unit tests
      working-directory: business_intel_scraper/frontend
      run: npm run test:coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./business_intel_scraper/frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # ================================
  # Integration Testing
  # ================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: visual_analytics_test
          POSTGRES_USER: va_test_user
          POSTGRES_PASSWORD: test_password_123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Install frontend dependencies
      working-directory: business_intel_scraper/frontend
      run: npm ci
    
    - name: Build frontend
      working-directory: business_intel_scraper/frontend
      run: npm run build
    
    - name: Start backend server
      env:
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_NAME: visual_analytics_test
        TEST_DB_USER: va_test_user
        TEST_DB_PASSWORD: test_password_123
      run: |
        cd business_intel_scraper/backend/api
        python main_enhanced.py &
        sleep 10  # Wait for server to start
    
    - name: Run integration tests
      run: |
        python business_intel_scraper/backend/tests/test_api_comprehensive.py

  # ================================
  # Security Scanning
  # ================================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ================================
  # Build & Package
  # ================================
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [code-quality, test-backend, test-frontend, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ================================
  # Deploy to Staging
  # ================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply, docker-compose up, etc.
    
    - name: Run smoke tests
      run: |
        echo "üîç Running smoke tests on staging..."
        # Add smoke tests for staging environment

  # ================================
  # Deploy to Production
  # ================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        # Add your production deployment commands here
    
    - name: Run production smoke tests
      run: |
        echo "üîç Running smoke tests on production..."
        # Add smoke tests for production environment
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Production deployment successful!"
        # Add notification logic (Slack, email, etc.)
    
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Production deployment failed!"
        # Add failure notification logic

  # ================================
  # Performance Testing
  # ================================
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run performance tests
      run: |
        # Create a simple k6 performance test
        cat << 'EOF' > performance-test.js
        import http from 'k6/http';
        import { check, sleep } from 'k6';
        
        export let options = {
          vus: 50, // 50 virtual users
          duration: '30s',
        };
        
        export default function() {
          let response = http.get('https://your-staging-url.com/health');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 500ms': (r) => r.timings.duration < 500,
          });
          sleep(1);
        }
        EOF
        
        # Run the performance test
        k6 run performance-test.js
