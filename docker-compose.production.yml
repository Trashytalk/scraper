# Production Docker Compose Configuration
# Orchestrates the full stack with database, backend, frontend, and monitoring

version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: va_database
    environment:
      POSTGRES_DB: visual_analytics
      POSTGRES_USER: va_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - va_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U va_user -d visual_analytics"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: va_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - va_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Application (Backend + Frontend)
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        BUILD_ENV: production
    container_name: va_app
    environment:
      - APP_ENV=production
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=visual_analytics
      - DB_USER=va_user
      - DB_PASSWORD=${DB_PASSWORD:-secure_password_123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password_123}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost}
    ports:
      - "80:80"
      - "8000:8000"
    volumes:
      - app_logs:/app/logs
      - ./config:/app/config:ro
    networks:
      - va_network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer (for scaling)
  nginx:
    image: nginx:alpine
    container_name: va_nginx
    volumes:
      - ./docker/nginx-lb.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "443:443"
      - "8080:80"
    networks:
      - va_network
    depends_on:
      - app
    restart: unless-stopped

  # Monitoring: Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: va_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - va_network
    restart: unless-stopped

  # Monitoring: Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: va_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_password_123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    networks:
      - va_network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  va_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
