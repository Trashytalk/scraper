# =============================================================================
# Multi-Stage Production Docker Configuration
# Optimized for security, performance, and production deployment
# =============================================================================

# Stage 1: Base dependencies and security setup
FROM python:3.11-slim as base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# Create non-root user for security
RUN groupadd --gid 1000 appuser && \
    useradd --uid 1000 --gid appuser --shell /bin/bash --create-home appuser

# Install system dependencies and security updates
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    wget \
    gnupg2 \
    ca-certificates \
    software-properties-common \
    apt-transport-https \
    build-essential \
    git \
    && apt-get upgrade -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Stage 2: Python dependencies
FROM base as dependencies

# Install Python build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    libffi-dev \
    libssl-dev \
    libxml2-dev \
    libxslt1-dev \
    zlib1g-dev \
    libjpeg-dev \
    libpng-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements files
COPY requirements.txt requirements-consolidated.txt /tmp/

# Install Python dependencies
RUN pip install --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r /tmp/requirements-consolidated.txt && \
    pip install --no-cache-dir gunicorn uvicorn[standard] && \
    pip install --no-cache-dir psycopg2-binary redis celery && \
    rm -rf /tmp/* /var/tmp/* ~/.cache/pip

# Stage 3: Node.js for frontend build
FROM node:18-alpine as frontend-builder

WORKDIR /app/frontend

# Copy package files
COPY business_intel_scraper/frontend/package*.json ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy frontend source
COPY business_intel_scraper/frontend/ ./

# Build frontend for production
RUN npm run build

# Stage 4: Application setup
FROM dependencies as application

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=appuser:appuser . .

# Copy frontend build
COPY --from=frontend-builder --chown=appuser:appuser /app/frontend/build ./gui/build/

# Create necessary directories with proper permissions
RUN mkdir -p \
    /app/logs \
    /app/data \
    /app/backups \
    /app/temp \
    /app/uploads \
    /app/cache \
    && chown -R appuser:appuser /app

# Install application in development mode
RUN pip install -e .

# Stage 5: Production runtime
FROM python:3.11-slim as production

# Copy base setup from earlier stages
COPY --from=base /etc/passwd /etc/group /etc/
COPY --from=dependencies /usr/local /usr/local

# Install runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    libxml2 \
    libxslt1.1 \
    libjpeg62-turbo \
    libpng16-16 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy application from application stage
COPY --from=application --chown=appuser:appuser /app /app

# Set environment variables for production
ENV ENVIRONMENT=production \
    DEBUG=false \
    LOG_LEVEL=INFO \
    PYTHONPATH=/app \
    PATH="/home/appuser/.local/bin:$PATH"

# Create startup script
COPY docker/start.sh /app/start.sh

RUN chmod +x /app/start.sh

# Create health check script
COPY docker/health_check.sh /app/health_check.sh

RUN chmod +x /app/health_check.sh

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /app/health_check.sh

# Default command
CMD ["/app/start.sh"]

# =============================================================================
# Build Arguments and Labels for metadata
# =============================================================================

ARG BUILD_DATE
ARG VERSION
ARG GIT_COMMIT

LABEL maintainer="Business Intelligence Team" \
      version="$VERSION" \
      description="Business Intelligence Scraper Platform" \
      build-date="$BUILD_DATE" \
      git-commit="$GIT_COMMIT" \
      security.scan="required" \
      base-image="python:3.11-slim"

# =============================================================================
# Security hardening
# =============================================================================

# Remove unnecessary packages and clean up
RUN apt-get autoremove -y && \
    apt-get autoclean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /root/.cache

# Set secure file permissions
RUN find /app -type f -name "*.py" -exec chmod 644 {} \; && \
    find /app -type f -name "*.sh" -exec chmod 755 {} \; && \
    chmod 700 /app/logs /app/data /app/backups

# Final user switch
USER appuser:appuser
