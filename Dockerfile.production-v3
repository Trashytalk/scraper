# Production-Optimized Dockerfile
# Multi-stage build for Business Intelligence Scraper

# Build stage
FROM python:3.12-slim as builder

# Set build arguments
ARG BUILD_DATE
ARG VERSION=3.0.0
ARG VCS_REF

# Add metadata
LABEL maintainer="Business Intelligence Team" \
      version="${VERSION}" \
      description="Enterprise Business Intelligence Scraper" \
      build-date="${BUILD_DATE}" \
      vcs-ref="${VCS_REF}"

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create application user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set working directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt requirements-consolidated.txt ./
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements-consolidated.txt

# Production stage
FROM python:3.12-slim as production

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    supervisor \
    nginx \
    redis-server \
    sqlite3 \
    && rm -rf /var/lib/apt/lists/*

# Create application user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Create directories
RUN mkdir -p /app /app/data /app/logs /app/config /app/secrets \
    /var/log/supervisor /etc/supervisor/conf.d

# Copy Python packages from builder
COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Set working directory
WORKDIR /app

# Copy application code
COPY . .

# Copy production configurations
COPY docker/nginx.conf /etc/nginx/sites-available/default
COPY docker/supervisor.conf /etc/supervisor/conf.d/
COPY docker/redis.conf /etc/redis/redis.conf
COPY docker/entrypoint.sh /entrypoint.sh

# Set permissions
RUN chown -R appuser:appuser /app && \
    chmod +x /entrypoint.sh && \
    chmod +x /app/start_servers.sh

# Create volume mount points
VOLUME ["/app/data", "/app/logs", "/app/secrets"]

# Expose ports
EXPOSE 8000 80 443 6379

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/api/health || exit 1

# Switch to non-root user
USER appuser

# Set environment variables
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    ENVIRONMENT=production \
    PORT=8000

# Entry point
ENTRYPOINT ["/entrypoint.sh"]
CMD ["supervisord", "-c", "/etc/supervisor/conf.d/supervisor.conf", "-n"]
