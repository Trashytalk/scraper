import React, { useState, useEffect, useRef } from "react";
import OperationsInterface from "./OperationsInterface";
import DatabaseManagement from "./DatabaseManagement";

interface ScrapingJob {
  name: string;
  type: string;
  url: string;
  scraper_type: "basic" | "e_commerce" | "news" | "social_media" | "api" | "intelligent";
  custom_selectors?: { [key: string]: string };
  config?: {
    max_pages?: number;
    max_depth?: number;
    max_links?: number;
    delay?: number;
    follow_links?: boolean;
    follow_internal_links?: boolean;
    follow_external_links?: boolean;
    crawl_links?: boolean;
    link_patterns?: string[];
    ignore_patterns?: string[];
    include_patterns?: string[];
    exclude_patterns?: string[];
    source_crawler_job_id?: number;
    batch_mode?: boolean;
    url_extraction_field?: string;
    // Content options
    extract_full_html?: boolean;
    crawl_entire_domain?: boolean;
    include_images?: boolean;
    include_forms?: boolean;
    include_scripts?: boolean;
    extract_metadata?: boolean;
    save_to_database?: boolean;
    // Advanced options
    respect_robots_txt?: boolean;
    use_proxy?: boolean;
    enable_javascript?: boolean;
    mobile_mode?: boolean;
    [key: string]: any;
  };
}

interface JobResult {
  id: number;
  name: string;
  type: string;
  status: string;
  created_at: string;
  results_count: number;
  url?: string;
  config?: any;
}

interface LoginData {
  username: string;
  password: string;
}

interface JobDetails {
  id: number;
  name: string;
  type: string;
  status: string;
  config: any;
  created_at: string;
  started_at?: string;
  completed_at?: string;
  error_message?: string;
}

interface AnalyticsData {
  total_jobs: number;
  completed_jobs: number;
  failed_jobs: number;
  running_jobs: number;
  total_data_points: number;
  avg_completion_time: number;
}

interface PerformanceMetrics {
  cpu_usage: number;
  memory_usage: number;
  active_connections: number;
  requests_per_minute: number;
  avg_response_time: number;
  cache_hit_rate: number;
}

interface JobResultsData {
  job_id: number;
  job_name: string;
  data: any[];
  total_count: number;
  status: string;
  created_at: string;
  completed_at?: string;
}

const App = () => {
  const [isBackendConnected, setIsBackendConnected] = useState(false);
  const [jobs, setJobs] = useState<JobResult[]>([]);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [token, setToken] = useState<string>("");
  const [currentTab, setCurrentTab] = useState<
    | "dashboard"
    | "jobs"
    | "operations"
    | "analytics"
    | "performance"
    | "crawlers"
    | "network"
    | "osint"
    | "data-enrichment"
    | "data-parsing"
    | "browser"
    | "visualization"
    | "database"
    | "ai-analytics"
  >("operations");
  const [loginData, setLoginData] = useState<LoginData>({
    username: "admin",
    password: "admin123",
  });
  const [newJob, setNewJob] = useState<ScrapingJob>({
    name: "",
    type: "intelligent_crawling", // Default to intelligent crawling
    url: "",
    scraper_type: "intelligent",
    custom_selectors: {},
    config: {
      max_depth: 3,
      max_pages: 15,
      max_links: 100,
      delay: 1000,
      follow_internal_links: true,
      follow_external_links: false,
      crawl_links: true,
      // Content options
      extract_full_html: false,
      crawl_entire_domain: false,
      include_images: false,
      include_forms: false,
      include_scripts: false,
      extract_metadata: false,
      save_to_database: true,
      // Pattern filtering
      include_patterns: [],
      exclude_patterns: [],
      // Advanced options
      respect_robots_txt: false,
      use_proxy: false,
      enable_javascript: false,
      mobile_mode: false,
    },
  });
  const [selectedJob, setSelectedJob] = useState<JobDetails | null>(null);
  const [jobResults, setJobResults] = useState<JobResultsData | null>(null);
  const [resultsSearchTerm, setResultsSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const [selectedCrawlerJob, setSelectedCrawlerJob] = useState<number | null>(
    null,
  );
  const [crawlerJobs, setCrawlerJobs] = useState<JobDetails[]>([]);
  const [extractedUrls, setExtractedUrls] = useState<string[]>([]);
  const [analytics, setAnalytics] = useState<AnalyticsData | null>(null);
  const [performance, setPerformance] = useState<PerformanceMetrics | null>(
    null,
  );
  const [isSubmitting, setIsSubmitting] = useState(false);

  // AI Analytics state
  const [aiServiceStatus, setAiServiceStatus] = useState<any>(null);
  const [aiAnalysisResults, setAiAnalysisResults] = useState<any>(null);
  const [aiDashboardData, setAiDashboardData] = useState<any>(null);
  const [aiRecommendations, setAiRecommendations] = useState<any[]>([]);
  const [selectedDataForAI, setSelectedDataForAI] = useState<any[]>([]);
  const [isAiAnalyzing, setIsAiAnalyzing] = useState(false);

  // Operations configuration state
  const [operationsConfig, setOperationsConfig] = useState(() => {
    const saved = localStorage.getItem("operationsConfig");
    return saved
      ? JSON.parse(saved)
      : {
          showDashboard: true,
          showJobCreation: true,
          showQueue: true,
          showConfiguration: true,
          expandedSections: {
            dashboard: true,
            jobCreation: true,
            queue: true,
            configuration: false,
          },
          autoRefresh: true,
          refreshInterval: 5000,
        };
  });
  const [configPanelOpen, setConfigPanelOpen] = useState(false);
  const [workflowSidebarOpen, setWorkflowSidebarOpen] = useState(false);
  const [selectedJobForWorkflow, setSelectedJobForWorkflow] =
    useState<JobResult | null>(null);

  // Modal state ref to prevent auto-refresh interference
  const isModalOpen = useRef(false);

  // Check backend connection
  useEffect(() => {
    const checkBackend = async () => {
      try {
        const response = await fetch("http://localhost:8000/api/health");
        setIsBackendConnected(response.ok);
      } catch (error) {
        setIsBackendConnected(false);
      }
    };

    checkBackend();
    const interval = setInterval(checkBackend, 30000);
    return () => clearInterval(interval);
  }, []);

  // Login function
  const login = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const response = await fetch("http://localhost:8000/api/auth/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(loginData),
      });

      if (response.ok) {
        const data = await response.json();
        setToken(data.access_token);
        setIsAuthenticated(true);
        loadDashboardData(data.access_token);
      } else {
        alert("Login failed");
      }
    } catch (error) {
      console.error("Login error:", error);
      alert("Login error");
    }
  };

  // Load all dashboard data
  const loadDashboardData = async (authToken?: string) => {
    await Promise.all([
      fetchJobs(authToken),
      fetchAnalytics(authToken),
      fetchPerformance(authToken),
    ]);
  };

  // Fetch jobs
  const fetchJobs = async (authToken?: string) => {
    try {
      const response = await fetch("http://localhost:8000/api/jobs", {
        headers: {
          Authorization: `Bearer ${authToken || token}`,
        },
      });
      if (response.ok) {
        const data = await response.json();
        setJobs(data);
      }
    } catch (error) {
      console.error("Failed to fetch jobs:", error);
    }
  };

  // Fetch analytics
  const fetchAnalytics = async (authToken?: string) => {
    try {
      const response = await fetch(
        "http://localhost:8000/api/analytics/dashboard",
        {
          headers: {
            Authorization: `Bearer ${authToken || token}`,
          },
        },
      );
      if (response.ok) {
        const data = await response.json();
        // Transform API response to match frontend interface
        const transformedData = {
          total_jobs: data.jobs?.total || 0,
          completed_jobs: data.jobs?.completed || 0,
          failed_jobs: data.jobs?.failed || 0,
          running_jobs: data.jobs?.running || 0,
          total_data_points: data.results?.total || 0,
          avg_completion_time: 0, // Will need to calculate this from performance data
        };
        setAnalytics(transformedData);
      }
    } catch (error) {
      console.error("Failed to fetch analytics:", error);
    }
  };

  // Fetch performance metrics
  const fetchPerformance = async (authToken?: string) => {
    try {
      const response = await fetch(
        "http://localhost:8000/api/performance/summary",
        {
          headers: {
            Authorization: `Bearer ${authToken || token}`,
          },
        },
      );
      if (response.ok) {
        const data = await response.json();
        setPerformance(data);
      }
    } catch (error) {
      console.error("Failed to fetch performance:", error);
    }
  };

  // Get job details
  const getJobDetails = async (jobId: number) => {
    console.log("getJobDetails called for job:", jobId);
    
    // Clear any existing modal state first
    setSelectedJob(null);
    
    // Small delay to ensure state clears properly
    await new Promise(resolve => setTimeout(resolve, 50));
    
    try {
      const response = await fetch(`http://localhost:8000/api/jobs/${jobId}`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (response.ok) {
        const data = await response.json();
        console.log("Job details received:", data);
        setSelectedJob(data);
      } else {
        console.error("Failed to fetch job details, status:", response.status);
      }
    } catch (error) {
      console.error("Failed to fetch job details:", error);
    }
  };

  // Start job
  const startJob = async (jobId: number) => {
    try {
      const response = await fetch(
        `http://localhost:8000/api/jobs/${jobId}/start`,
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${token}`,
          },
        },
      );
      if (response.ok) {
        fetchJobs();
        alert("Job started successfully!");
      }
    } catch (error) {
      console.error("Failed to start job:", error);
      alert("Failed to start job");
    }
  };

  // Get job results
  const getJobResults = async (jobId: number) => {
    console.log("getJobResults called for job:", jobId);
    
    // Clear any existing modal state first
    setJobResults(null);
    
    // Small delay to ensure state clears properly
    await new Promise(resolve => setTimeout(resolve, 50));
    
    try {
      const response = await fetch(
        `http://localhost:8000/api/jobs/${jobId}/results`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        },
      );

      let data;

      if (response.ok) {
        data = await response.json();
        console.log("Raw API response:", data);
      } else {
        console.log("Backend response error, status:", response.status, "showing demo data");
        // If backend is not available, show demo data
        const job = jobs.find((j) => j.id === jobId);

        // Generate realistic demo data based on job type
        let demoData = [];
        if (
          job?.name?.toLowerCase().includes("news") ||
          job?.name?.toLowerCase().includes("article")
        ) {
          demoData = [
            {
              id: 1,
              title: "Breaking News: Tech Industry Updates",
              url: `${job?.url || "https://example.com"}/article/1`,
              content:
                "This is a comprehensive analysis of the latest developments in the technology sector, including major announcements from leading companies...",
              published_date: "2025-01-15T10:30:00Z",
              author: "John Smith",
              category: "Technology",
              reading_time: "5 min",
            },
            {
              id: 2,
              title: "Market Analysis: Q4 Financial Report",
              url: `${job?.url || "https://example.com"}/article/2`,
              content:
                "The fourth quarter financial results show significant growth across multiple sectors. Key highlights include...",
              published_date: "2025-01-14T08:15:00Z",
              author: "Sarah Johnson",
              category: "Finance",
              reading_time: "8 min",
            },
            {
              id: 3,
              title: "Innovation Spotlight: AI Breakthroughs",
              url: `${job?.url || "https://example.com"}/article/3`,
              content:
                "Recent advances in artificial intelligence have opened new possibilities for automation and efficiency improvements...",
              published_date: "2025-01-13T14:45:00Z",
              author: "Dr. Michael Chen",
              category: "Innovation",
              reading_time: "12 min",
            },
          ];
        } else if (
          job?.name?.toLowerCase().includes("ecommerce") ||
          job?.name?.toLowerCase().includes("product")
        ) {
          demoData = [
            {
              id: 1,
              product_name: "Wireless Bluetooth Headphones",
              price: "$129.99",
              url: `${job?.url || "https://example.com"}/product/1`,
              description:
                "Premium wireless headphones with noise cancellation and 30-hour battery life",
              rating: 4.5,
              reviews_count: 1247,
              in_stock: true,
              category: "Electronics",
            },
            {
              id: 2,
              product_name: "Smart Fitness Tracker",
              price: "$79.99",
              url: `${job?.url || "https://example.com"}/product/2`,
              description:
                "Advanced fitness tracker with heart rate monitoring, GPS, and sleep tracking",
              rating: 4.2,
              reviews_count: 892,
              in_stock: true,
              category: "Health & Fitness",
            },
            {
              id: 3,
              product_name: "Portable Power Bank 20000mAh",
              price: "$45.99",
              url: `${job?.url || "https://example.com"}/product/3`,
              description:
                "High-capacity power bank with fast charging and multiple USB ports",
              rating: 4.7,
              reviews_count: 2156,
              in_stock: false,
              category: "Accessories",
            },
          ];
        } else {
          demoData = [
            {
              id: 1,
              url: `${job?.url || "https://example.com"}/page/1`,
              title: "Homepage Content Analysis",
              content:
                "Main landing page with key information about services and company overview",
              scraped_at: "2025-01-15T12:00:00Z",
              word_count: 1250,
              links_found: 23,
              images_found: 8,
            },
            {
              id: 2,
              url: `${job?.url || "https://example.com"}/page/2`,
              title: "About Us Page",
              content:
                "Company history, mission statement, and team information",
              scraped_at: "2025-01-15T12:01:30Z",
              word_count: 850,
              links_found: 12,
              images_found: 15,
            },
            {
              id: 3,
              url: `${job?.url || "https://example.com"}/page/3`,
              title: "Services Overview",
              content:
                "Detailed description of available services and pricing information",
              scraped_at: "2025-01-15T12:03:00Z",
              word_count: 2100,
              links_found: 45,
              images_found: 6,
            },
          ];
        }

        data = {
          data: demoData,
          total_records: demoData.length,
          exported_at: new Date().toISOString(),
        };
      }

      // Transform the data to match our interface
      let extractedData = [];
      let totalCount = 0;
      
      // Handle intelligent crawling results - check if it's an array with crawling data
      if (Array.isArray(data) && data.length > 0 && data[0].crawled_data) {
        // Intelligent crawling result structure (array with nested crawled_data)
        const crawlingResult = data[0];
        extractedData = crawlingResult.crawled_data || [];
        totalCount = crawlingResult.summary?.data_extracted || extractedData.length;
        console.log("Detected intelligent crawling data:", crawlingResult.summary);
        console.log("Extracted data count:", extractedData.length);
      } else if (data && typeof data === 'object' && data.crawled_data) {
        // Direct crawling result structure  
        extractedData = data.crawled_data || [];
        totalCount = data.summary?.data_extracted || extractedData.length;
        console.log("Detected intelligent crawling data:", data.summary);
      } else if (Array.isArray(data)) {
        // Direct array of results
        extractedData = data;
        totalCount = data.length;
      } else if (data && (data.data || data.results)) {
        // Nested result structure
        extractedData = data.data || data.results || [];
        totalCount = data.total_records || data.total_count || data.count || extractedData.length;
      } else {
        // Single result or unknown structure
        extractedData = data ? [data] : [];
        totalCount = extractedData.length;
      }

      const transformedData = {
        job_id: jobId,
        job_name: jobs.find((j) => j.id === jobId)?.name || `Job ${jobId}`,
        data: extractedData,
        total_count: totalCount,
        status: "completed",
        created_at: new Date().toISOString(),
        completed_at:
          data.exported_at || data.completed_at || new Date().toISOString(),
        // Include original crawling metadata if available
        ...(data && data.summary && {
          crawling_summary: data.summary,
          discovered_urls: data.discovered_urls || [],
        }),
      };
      console.log("Setting jobResults with data:", transformedData);
      setJobResults(transformedData);
      console.log("jobResults state should now be set");
      setResultsSearchTerm("");
      setCurrentPage(1); // Reset to first page
      
      // Return the data so other components can use it
      return data;
    } catch (error) {
      console.error("Failed to fetch results:", error);

      // Show demo data on error too
      const job = jobs.find((j) => j.id === jobId);
      const demoData = [
        {
          id: 1,
          title: "Demo Data Entry",
          content:
            "This is demonstration data shown when the backend is not available",
          url: `${job?.url || "https://example.com"}/demo`,
          scraped_at: new Date().toISOString(),
        },
      ];

      const transformedData = {
        job_id: jobId,
        job_name: job?.name || `Job ${jobId}`,
        data: demoData,
        total_count: demoData.length,
        status: "completed",
        created_at: new Date().toISOString(),
        completed_at: new Date().toISOString(),
      };

      setJobResults(transformedData);
      setResultsSearchTerm("");
      setCurrentPage(1); // Reset to first page
      
      // Return the demo data so other components can use it
      return demoData;
    }
  };

  useEffect(() => {
    if (isAuthenticated && token) {
      loadDashboardData();
      fetchCrawlerJobs(); // Fetch available crawler jobs
      const interval = setInterval(() => {
        if (
          currentTab === "dashboard" ||
          currentTab === "jobs" ||
          currentTab === "operations"
        ) {
          fetchJobs();
        }
        if (currentTab === "performance") {
          fetchPerformance();
        }
      }, 5000);
      return () => clearInterval(interval);
    }
  }, [isAuthenticated, token, currentTab]);

  // Submit new job
  const submitJob = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      const response = await fetch("http://localhost:8000/api/jobs", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(newJob),
      });

      if (response.ok) {
        const result = await response.json();
        console.log("Job created:", result);
        setNewJob({
          name: "",
          type: "intelligent_crawling",
          url: "",
          scraper_type: "intelligent",
          custom_selectors: {},
          config: {
            max_depth: 3,
            max_pages: 15,
            max_links: 100,
            delay: 1000,
            follow_internal_links: true,
            follow_external_links: false,
            crawl_links: true,
            // Content options
            extract_full_html: false,
            crawl_entire_domain: false,
            include_images: false,
            include_forms: false,
            include_scripts: false,
            extract_metadata: false,
            save_to_database: true,
            // Pattern filtering
            include_patterns: [],
            exclude_patterns: [],
            // Advanced options
            respect_robots_txt: false,
            use_proxy: false,
            enable_javascript: false,
            mobile_mode: false,
          },
        });
        fetchJobs();
        setCurrentTab("jobs");
      } else {
        const errorData = await response.text();
        console.error("Failed to create job:", response.status, errorData);
        alert(`Failed to create job: ${response.status} ${errorData}`);
      }
    } catch (error) {
      console.error("Error creating job:", error);
      alert("Error creating job: " + error);
    } finally {
      setIsSubmitting(false);
    }
  };

  // Fetch crawler jobs for the dropdown
  const fetchCrawlerJobs = async () => {
    try {
      const response = await fetch("http://localhost:8000/api/jobs", {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const data = await response.json();
        // Filter for completed crawler jobs
        const crawlers =
          data.jobs?.filter(
            (job: JobDetails) =>
              job.status === "completed" &&
              (job.type === "crawling" ||
                job.name.toLowerCase().includes("crawl")),
          ) || [];
        setCrawlerJobs(crawlers);
      }
    } catch (error) {
      console.error("Error fetching crawler jobs:", error);
    }
  };

  // Extract URLs from crawler job results
  const extractUrlsFromCrawler = async (crawlerJobId: number) => {
    try {
      // Use the new backend endpoint for URL extraction
      const response = await fetch(
        `http://localhost:8000/api/jobs/${crawlerJobId}/extract-urls`,
        {
          headers: { Authorization: `Bearer ${token}` },
        },
      );

      if (response.ok) {
        const data = await response.json();
        const urls = data.extracted_urls || [];

        setExtractedUrls(urls);

        if (urls.length > 0) {
          // Update the job config with the extracted URLs
          setNewJob((prev) => ({
            ...prev,
            config: {
              ...prev.config,
              source_crawler_job_id: crawlerJobId,
              batch_mode: true,
              extracted_urls: urls,
            },
          }));
        }

        return urls;
      } else {
        console.log(
          `Backend extraction failed with status ${response.status}, trying fallback`,
        );
      }
    } catch (error) {
      console.log("Backend extraction error:", error);
    }

    // Fallback to client-side extraction
    try {
      const fallbackResponse = await fetch(
        `http://localhost:8000/api/jobs/${crawlerJobId}/results`,
        {
          headers: { Authorization: `Bearer ${token}` },
        },
      );

      if (fallbackResponse.ok) {
        const data = await fallbackResponse.json();
        const urls: string[] = [];

        console.log("Fallback extraction - got job results:", data);

        // Extract URLs from crawler data with enhanced field detection
        if (data.data && Array.isArray(data.data)) {
          data.data.forEach((item: any, index: number) => {
            console.log(`Processing item ${index}:`, item);

            // Comprehensive list of possible URL fields
            const possibleUrlFields = [
              "url",
              "link",
              "href",
              "page_url",
              "discovered_url",
              "target_url",
              "source_url",
              "canonical_url",
              "original_url",
              "crawled_url",
              "found_url",
              "extracted_url",
              "site_url",
              "web_url",
              "full_url",
              "absolute_url",
              "final_url",
              "redirect_url",
              "destination_url",
            ];

            // Check direct fields
            for (const field of possibleUrlFields) {
              if (item[field]) {
                const value = item[field];
                if (
                  typeof value === "string" &&
                  (value.startsWith("http://") || value.startsWith("https://"))
                ) {
                  urls.push(value);
                  console.log(`Found URL in field '${field}': ${value}`);
                }
              }
            }

            // Check for arrays of links
            if (item.links && Array.isArray(item.links)) {
              item.links.forEach((link: any, linkIndex: number) => {
                if (
                  typeof link === "string" &&
                  (link.startsWith("http://") || link.startsWith("https://"))
                ) {
                  urls.push(link);
                  console.log(`Found URL in links[${linkIndex}]: ${link}`);
                } else if (link && typeof link === "object") {
                  // Check nested link objects
                  possibleUrlFields.forEach((field) => {
                    if (
                      link[field] &&
                      typeof link[field] === "string" &&
                      (link[field].startsWith("http://") ||
                        link[field].startsWith("https://"))
                    ) {
                      urls.push(link[field]);
                      console.log(
                        `Found URL in links[${linkIndex}].${field}: ${link[field]}`,
                      );
                    }
                  });
                }
              });
            }

            // Check any other array fields that might contain URLs
            Object.keys(item).forEach((key) => {
              if (Array.isArray(item[key])) {
                item[key].forEach((arrayItem: any, arrayIndex: number) => {
                  if (
                    typeof arrayItem === "string" &&
                    (arrayItem.startsWith("http://") ||
                      arrayItem.startsWith("https://"))
                  ) {
                    urls.push(arrayItem);
                    console.log(
                      `Found URL in array ${key}[${arrayIndex}]: ${arrayItem}`,
                    );
                  }
                });
              }
            });

            // Check for nested objects that might contain URLs
            Object.keys(item).forEach((key) => {
              const value = item[key];
              if (value && typeof value === "object" && !Array.isArray(value)) {
                possibleUrlFields.forEach((field) => {
                  if (
                    value[field] &&
                    typeof value[field] === "string" &&
                    (value[field].startsWith("http://") ||
                      value[field].startsWith("https://"))
                  ) {
                    urls.push(value[field]);
                    console.log(
                      `Found URL in nested ${key}.${field}: ${value[field]}`,
                    );
                  }
                });
              }
            });
          });
        }

        // Remove duplicates and validate URLs
        const uniqueUrls = [...new Set(urls)].filter((url) => {
          try {
            new URL(url);
            return true;
          } catch {
            console.log(`Invalid URL filtered out: ${url}`);
            return false;
          }
        });

        console.log(`Final extracted URLs (${uniqueUrls.length}):`, uniqueUrls);

        setExtractedUrls(uniqueUrls);

        if (uniqueUrls.length > 0) {
          // Update the job config with the extracted URLs
          setNewJob((prev) => ({
            ...prev,
            config: {
              ...prev.config,
              source_crawler_job_id: crawlerJobId,
              batch_mode: true,
              extracted_urls: uniqueUrls,
            },
          }));
        }

        return uniqueUrls;
      }
    } catch (error) {
      console.error("Fallback extraction error:", error);
    }

    return [];
  };

  // Create batch scraping jobs from extracted URLs
  const createBatchScrapingJobs = async (
    urls: string[],
    batchSize: number = 10,
  ) => {
    if (!urls.length) return;

    setIsSubmitting(true);
    try {
      // Use the new batch job creation endpoint
      const response = await fetch("http://localhost:8002/api/jobs/batch", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          base_name: newJob.name,
          source_crawler_job_id: selectedCrawlerJob,
          scraper_type: newJob.scraper_type,
          urls: urls,
          batch_size: batchSize,
          config: {
            ...newJob.config,
            custom_selectors: newJob.custom_selectors,
          },
        }),
      });

      if (response.ok) {
        const createdJobs = await response.json();

        alert(
          `✅ Successfully created ${createdJobs.length} batch scraping jobs from ${urls.length} URLs!`,
        );
        await fetchJobs();

        // Reset form
        setNewJob({
          name: "",
          type: "intelligent_crawling",
          url: "",
          scraper_type: "intelligent",
          custom_selectors: {},
          config: {
            max_depth: 3,
            max_pages: 15,
            max_links: 100,
            delay: 1000,
            follow_internal_links: true,
            follow_external_links: false,
            crawl_links: true,
            // Content options
            extract_full_html: false,
            crawl_entire_domain: false,
            include_images: false,
            include_forms: false,
            include_scripts: false,
            extract_metadata: false,
            save_to_database: true,
            // Pattern filtering
            include_patterns: [],
            exclude_patterns: [],
            // Advanced options
            respect_robots_txt: false,
            use_proxy: false,
            enable_javascript: false,
            mobile_mode: false,
          },
        });
        setSelectedCrawlerJob(null);
        setExtractedUrls([]);
      } else {
        const errorData = await response.text();
        console.error(
          "Failed to create batch jobs:",
          response.status,
          errorData,
        );
        alert(`Failed to create batch jobs: ${response.status} ${errorData}`);
      }
    } catch (error) {
      console.error("Error creating batch jobs:", error);
      alert("Error creating batch jobs: " + error);
    } finally {
      setIsSubmitting(false);
    }
  };

  // Auto-fetch AI data when on AI tab (moved before early return to fix hooks order)
  useEffect(() => {
    if (isAuthenticated && token && currentTab === "ai-analytics") {
      fetchAiServiceStatus();
      fetchAiDashboard();
      fetchAiRecommendations();
      
      const interval = setInterval(() => {
        fetchAiDashboard();
        fetchAiServiceStatus();
      }, 10000); // Update every 10 seconds
      
      return () => clearInterval(interval);
    }
  }, [isAuthenticated, token, currentTab]);

  if (!isAuthenticated) {
    return (
      <div className="cyber-modal-overlay">
        <div className="cyber-card" style={{ 
          maxWidth: "400px", 
          margin: "0 auto",
          background: "var(--bg-modal)",
          border: "1px solid var(--metal-silver)",
          boxShadow: "0 0 50px var(--neon-cyan-glow)"
        }}>
          <h1 className="cyber-title" style={{ 
            textAlign: "center", 
            marginBottom: "30px",
            fontSize: "24px"
          }}>
            🔬 TACTICAL INTELLIGENCE
            <br />
            <span style={{ color: "var(--metal-gold)", fontSize: "18px" }}>
              SCRAPER SYSTEM
            </span>
          </h1>
          
          <div className={`status-indicator ${isBackendConnected ? 'status-connected' : 'status-disconnected'}`} 
               style={{ 
                 width: "100%",
                 justifyContent: "center",
                 marginBottom: "20px",
                 padding: "12px",
                 background: "var(--bg-glass)",
                 borderRadius: "6px",
                 border: `1px solid ${isBackendConnected ? 'var(--metal-gold)' : 'var(--metal-copper)'}`
               }}>
            SYSTEM STATUS: {isBackendConnected ? "ONLINE" : "OFFLINE"}
          </div>

          <form onSubmit={login} style={{ display: "flex", flexDirection: "column", gap: "20px" }}>
            <h2 className="cyber-subtitle" style={{ marginBottom: "10px" }}>
              🔐 ACCESS CONTROL
            </h2>
            
            <div>
              <label className="cyber-text" style={{ 
                display: "block", 
                marginBottom: "8px", 
                fontWeight: "600",
                color: "var(--metal-silver)"
              }}>
                USERNAME:
              </label>
              <input
                type="text"
                value={loginData.username}
                onChange={(e) =>
                  setLoginData({ ...loginData, username: e.target.value })
                }
                required
                className="cyber-input"
                style={{ width: "100%" }}
                placeholder="Enter username"
              />
            </div>
            
            <div>
              <label className="cyber-text" style={{ 
                display: "block", 
                marginBottom: "8px", 
                fontWeight: "600",
                color: "var(--metal-silver)"
              }}>
                PASSWORD:
              </label>
              <input
                type="password"
                value={loginData.password}
                onChange={(e) =>
                  setLoginData({ ...loginData, password: e.target.value })
                }
                required
                className="cyber-input"
                style={{ width: "100%" }}
                placeholder="Enter password"
              />
            </div>
            
            <button
              type="submit"
              disabled={!isBackendConnected}
              className={`cyber-button ${!isBackendConnected ? '' : 'cyber-button-gold'}`}
              style={{
                width: "100%",
                padding: "15px",
                fontSize: "16px",
                opacity: isBackendConnected ? 1 : 0.5,
                cursor: isBackendConnected ? "pointer" : "not-allowed"
              }}
            >
              {isBackendConnected ? "⚡ AUTHORIZE ACCESS" : "⚠️ SYSTEM OFFLINE"}
            </button>
          </form>
          
          <p className="cyber-text" style={{
            textAlign: "center",
            marginTop: "20px",
            fontSize: "12px",
            color: "var(--text-muted)",
            fontFamily: "'Orbitron', monospace"
          }}>
            DEFAULT CREDENTIALS: admin / admin123
          </p>
        </div>
      </div>
    );
  }

  // Operations configuration functions
  const updateOperationsConfig = (updates: any) => {
    const newConfig = { ...operationsConfig, ...updates };
    setOperationsConfig(newConfig);
    localStorage.setItem("operationsConfig", JSON.stringify(newConfig));
  };

  const toggleSection = (section: string) => {
    updateOperationsConfig({
      expandedSections: {
        ...operationsConfig.expandedSections,
        [section]: !operationsConfig.expandedSections[section],
      },
    });
  };

  const toggleConfigPanel = () => {
    setConfigPanelOpen(!configPanelOpen);
  };

  const resetOperationsConfig = () => {
    const defaultConfig = {
      showDashboard: true,
      showJobCreation: true,
      showQueue: true,
      showConfiguration: true,
      expandedSections: {
        dashboard: true,
        jobCreation: false,
        queue: true,
        configuration: false,
      },
      autoRefresh: true,
      refreshInterval: 5000,
    };
    setOperationsConfig(defaultConfig);
    localStorage.setItem("operationsConfig", JSON.stringify(defaultConfig));
  };

  // AI Analytics Functions
  const fetchAiServiceStatus = async () => {
    try {
      const response = await fetch("http://localhost:8000/api/ai/service/status", {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const data = await response.json();
        setAiServiceStatus(data);
      }
    } catch (error) {
      console.error("Error fetching AI service status:", error);
    }
  };

  const fetchAiDashboard = async () => {
    try {
      const response = await fetch("http://localhost:8000/api/ai/realtime-dashboard", {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const data = await response.json();
        setAiDashboardData(data);
      }
    } catch (error) {
      console.error("Error fetching AI dashboard:", error);
    }
  };

  const analyzeDataWithAI = async (data: any[], analysisType: string = "full") => {
    setIsAiAnalyzing(true);
    try {
      const response = await fetch("http://localhost:8000/api/ai/analyze", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          data: data,
          analysis_type: analysisType,
          options: { include_visualizations: true }
        }),
      });

      if (response.ok) {
        const result = await response.json();
        setAiAnalysisResults(result);
        return result;
      }
    } catch (error) {
      console.error("Error analyzing data with AI:", error);
    } finally {
      setIsAiAnalyzing(false);
    }
  };

  const fetchAiRecommendations = async () => {
    try {
      const response = await fetch("http://localhost:8000/api/ai/recommendations", {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const data = await response.json();
        setAiRecommendations(data.recommendations || []);
      }
    } catch (error) {
      console.error("Error fetching AI recommendations:", error);
    }
  };

  const generateAiInsights = async (jobId: number) => {
    try {
      const response = await fetch(`http://localhost:8000/api/ai/insights/${jobId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const data = await response.json();
        return data;
      }
    } catch (error) {
      console.error("Error generating AI insights:", error);
    }
  };

  const tabStyle = (tabName: string) => ({
    padding: "10px 20px",
    margin: "0 5px",
    backgroundColor: currentTab === tabName ? "#1976d2" : "#f8f9fa",
    color: currentTab === tabName ? "white" : "#333",
    border: "1px solid var(--border-muted)",
    borderRadius: "4px",
    cursor: "pointer",
    fontSize: "14px",
  });

  return (
    <div 
      className="cyber-glass"
      style={{
        padding: "20px",
      fontFamily: "'Rajdhani', sans-serif",
      maxWidth: "1600px",
      margin: "0 auto",
      minHeight: "100vh",
      background: "transparent"
    }}>
      <header className="cyber-glass" style={{
        marginBottom: "30px",
        display: "flex",
        justifyContent: "space-between",
        alignItems: "center",
        padding: "20px",
        borderRadius: "12px"
      }}>
        <div>
          <h1 className="cyber-title" style={{ 
            margin: "0",
            fontSize: "28px",
            background: "linear-gradient(45deg, var(--metal-silver), var(--metal-chrome))",
            backgroundClip: "text",
            WebkitBackgroundClip: "text",
            WebkitTextFillColor: "transparent"
          }}>
            🔬 TACTICAL INTELLIGENCE
            <br />
            <span style={{ fontSize: "20px", color: "var(--metal-gold)" }}>
              SCRAPER SYSTEM
            </span>
          </h1>
          <div className={`status-indicator ${isBackendConnected ? 'status-connected' : 'status-disconnected'}`} 
               style={{ marginTop: "10px" }}>
            SYSTEM: {isBackendConnected ? "ONLINE" : "OFFLINE"}
          </div>
        </div>
        <button
          onClick={() => {
            setIsAuthenticated(false);
            setToken("");
            setJobs([]);
            setAnalytics(null);
            setPerformance(null);
          }}
          className="cyber-button"
          style={{
            background: "linear-gradient(45deg, rgba(239, 68, 68, 0.1), rgba(220, 38, 38, 0.1))",
            borderColor: "var(--neon-red)",
            color: "var(--neon-red)"
          }}
        >
          � TERMINATE SESSION
        </button>
      </header>

      {/* Navigation Tabs */}
      <nav className="cyber-tabs" style={{ marginBottom: "30px", padding: "8px" }}>
        <button
          className={`cyber-tab ${currentTab === "operations" ? "active" : ""}`}
          onClick={() => setCurrentTab("operations")}
        >
          ⚙️ Operations
        </button>
        <button
          className={`cyber-tab ${currentTab === "dashboard" ? "active" : ""}`}
          onClick={() => setCurrentTab("dashboard")}
        >
          🧪 Intermediate--Testing
        </button>
        <button
          className={`cyber-tab ${currentTab === "analytics" ? "active" : ""}`}
          onClick={() => setCurrentTab("analytics")}
        >
          � Analytics
        </button>
        <button
          className={`cyber-tab ${currentTab === "network" ? "active" : ""}`}
          onClick={() => setCurrentTab("network")}
        >
          🔗 Network
        </button>
        <button
          className={`cyber-tab ${currentTab === "osint" ? "active" : ""}`}
          onClick={() => setCurrentTab("osint")}
        >
          🎯 OSINT
        </button>
        <button
          className={`cyber-tab ${currentTab === "data-enrichment" ? "active" : ""}`}
          onClick={() => setCurrentTab("data-enrichment")}
        >
          � Enrichment
        </button>
        <button
          className={`cyber-tab ${currentTab === "data-parsing" ? "active" : ""}`}
          onClick={() => setCurrentTab("data-parsing")}
        >
          � Parsing
        </button>
        <button
          className={`cyber-tab ${currentTab === "browser" ? "active" : ""}`}
          onClick={() => setCurrentTab("browser")}
        >
          🖥️ Browser
        </button>
        <button
          className={`cyber-tab ${currentTab === "visualization" ? "active" : ""}`}
          onClick={() => setCurrentTab("visualization")}
        >
          📈 Visual
        </button>
        <button
          className={`cyber-tab ${currentTab === "performance" ? "active" : ""}`}
          onClick={() => setCurrentTab("performance")}
        >
          ⚡ Performance
        </button>
        <button
          className={`cyber-tab ${currentTab === "database" ? "active" : ""}`}
          onClick={() => setCurrentTab("database")}
        >
          �️ Database
        </button>
        <button
          className={`cyber-tab ${currentTab === "ai-analytics" ? "active" : ""}`}
          onClick={() => setCurrentTab("ai-analytics")}
        >
          🤖 AI Core
        </button>
      </nav>

      {/* Operations Tab */}
      {currentTab === "operations" && (
        <div className="animate-fade-in">
          {/* Quick Create Job Section */}
          <div className="cyber-card" style={{ marginBottom: "30px" }}>
            <h2 className="cyber-subtitle" style={{ marginBottom: "20px" }}>
              ⚙️ OPERATION CONTROL - TARGET CONFIGURATION
            </h2>

            {/* Job Mode Selection */}
            <div style={{ marginBottom: "25px" }}>
              <div style={{ display: "flex", gap: "20px", marginBottom: "20px" }}>
                <label className="cyber-text" style={{
                  display: "flex",
                  alignItems: "center",
                  gap: "12px",
                  cursor: "pointer",
                  padding: "12px",
                  background: !newJob.config?.batch_mode ? "rgba(0, 255, 255, 0.1)" : "transparent",
                  border: `1px solid ${!newJob.config?.batch_mode ? "var(--metal-silver)" : "var(--border-muted)"}`,
                  borderRadius: "8px",
                  transition: "all 0.3s ease"
                }}>
                  <input
                    type="radio"
                    name="jobMode"
                    checked={!newJob.config?.batch_mode}
                    onChange={() => {
                      setNewJob((prev) => ({
                        ...prev,
                        config: { ...prev.config, batch_mode: false },
                      }));
                      setSelectedCrawlerJob(null);
                      setExtractedUrls([]);
                    }}
                    style={{ accentColor: "var(--metal-silver)" }}
                  />
                  <span className="cyber-text" style={{ fontWeight: "600", color: "var(--metal-silver)" }}>
                    🎯 SINGLE TARGET ACQUISITION
                  </span>
                </label>
                <label className="cyber-text" style={{
                  display: "flex",
                  alignItems: "center",
                  gap: "12px",
                  cursor: "pointer",
                  padding: "12px",
                  background: !!newJob.config?.batch_mode ? "rgba(255, 140, 0, 0.1)" : "transparent",
                  border: `1px solid ${!!newJob.config?.batch_mode ? "var(--neon-orange)" : "var(--border-muted)"}`,
                  borderRadius: "8px",
                  transition: "all 0.3s ease"
                }}>
                  <input
                    type="radio"
                    name="jobMode"
                    checked={!!newJob.config?.batch_mode}
                    onChange={() => {
                      setNewJob((prev) => ({
                        ...prev,
                        config: { ...prev.config, batch_mode: true },
                      }));
                      fetchCrawlerJobs();
                    }}
                    style={{ accentColor: "var(--neon-orange)" }}
                  />
                  <span className="cyber-text" style={{ fontWeight: "600", color: "var(--neon-orange)" }}>
                    🕷️ BATCH OPERATION PROTOCOL
                  </span>
                </label>
              </div>
            </div>

            {/* Batch Mode Configuration */}
            {newJob.config?.batch_mode && (
              <div className="cyber-glass" style={{
                padding: "20px",
                marginBottom: "25px",
                border: "1px solid var(--neon-orange)",
                background: "rgba(255, 140, 0, 0.05)"
              }}>
                <h4 className="cyber-subtitle" style={{ 
                  margin: "0 0 15px 0", 
                  color: "var(--neon-orange)",
                  fontSize: "16px"
                }}>
                  🔄 CRAWLER-TO-SCRAPER PIPELINE
                </h4>

                <div 
                  className="cyber-glass"
                  style={{
                    display: "grid",
                  gridTemplateColumns: "1fr 1fr",
                  gap: "20px",
                  marginBottom: "20px"
                }}>
                  <div>
                    <label className="cyber-text" style={{
                      display: "block",
                      marginBottom: "8px",
                      fontWeight: "600",
                      color: "var(--metal-silver)"
                    }}>
                      SELECT CRAWLER JOB:
                    </label>
                    <select
                      value={selectedCrawlerJob || ""}
                      onChange={async (e) => {
                        const jobId = parseInt(e.target.value);
                        setSelectedCrawlerJob(jobId);
                        if (jobId) {
                          const urls = await extractUrlsFromCrawler(jobId);
                          console.log(
                            `Extracted ${urls.length} URLs from crawler job ${jobId}`,
                          );
                        }
                      }}
                      className="cyber-input"
                      style={{ width: "100%" }}
                    >
                      <option value="">
                        Choose a completed crawler job...
                      </option>
                      {crawlerJobs.map((job) => (
                        <option key={job.id} value={job.id}>
                          {job.name} (
                          {new Date(job.created_at).toLocaleDateString()})
                        </option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="cyber-text" style={{
                      display: "block",
                      marginBottom: "8px",
                      fontWeight: "600",
                      color: "var(--metal-silver)"
                    }}>
                      BATCH SIZE:
                    </label>
                    <select
                      value={newJob.config?.batch_size || 10}
                      onChange={(e) =>
                        setNewJob((prev) => ({
                          ...prev,
                          config: {
                            ...prev.config,
                            batch_size: parseInt(e.target.value),
                          },
                        }))
                      }
                      className="cyber-input"
                      style={{ width: "100%" }}
                    >
                      <option value={5}>5 URLs per job</option>
                      <option value={10}>10 URLs per job</option>
                      <option value={25}>25 URLs per job</option>
                      <option value={50}>50 URLs per job</option>
                    </select>
                  </div>
                </div>

                {extractedUrls.length > 0 && (
                  <div className="cyber-glass" style={{
                    padding: "15px",
                    border: "1px solid var(--neon-green)",
                    background: "rgba(16, 185, 129, 0.05)",
                    marginBottom: "20px"
                  }}>
                    <div className="cyber-text" style={{
                      fontWeight: "600",
                      color: "var(--neon-green)",
                      marginBottom: "10px",
                      fontFamily: "'Orbitron', monospace"
                    }}>
                      ✅ TARGETS ACQUIRED: {extractedUrls.length} URLs
                    </div>
                    <div className="cyber-data-grid" style={{
                      maxHeight: "120px",
                      overflow: "auto",
                      fontSize: "14px",
                      background: "var(--bg-secondary)",
                      padding: "10px",
                      borderRadius: "6px",
                      fontFamily: "'Rajdhani', monospace"
                    }}>
                      {extractedUrls.slice(0, 10).map((url, index) => (
                        <div key={index} className="cyber-data-row" style={{ 
                          padding: "4px 0", 
                          borderBottom: "1px solid var(--border-muted)",
                          color: "var(--text-secondary)"
                        }}>
                          <span style={{ color: "var(--metal-silver)" }}>
                            {(index + 1).toString().padStart(2, '0')}.
                          </span> {url}
                        </div>
                      ))}
                      {extractedUrls.length > 10 && (
                        <div style={{ 
                          fontStyle: "italic", 
                          color: "var(--text-muted)",
                          textAlign: "center",
                          padding: "8px 0"
                        }}>
                          ... and {extractedUrls.length - 10} more targets
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Job Creation Form */}
            <form
              onSubmit={async (e) => {
                e.preventDefault();
                if (newJob.config?.batch_mode && extractedUrls.length > 0) {
                  await createBatchScrapingJobs(
                    extractedUrls,
                    newJob.config?.batch_size || 10,
                  );
                } else {
                  await submitJob(e);
                }
              }}
              style={{
                display: "grid",
                gridTemplateColumns: newJob.config?.batch_mode
                  ? "1fr 1fr auto"
                  : "1fr 1fr 1fr auto",
                gap: "20px",
                alignItems: "end",
              }}
            >
              <div>
                <label className="cyber-text" style={{
                  display: "block",
                  marginBottom: "8px",
                  fontWeight: "600",
                  color: "var(--metal-silver)"
                }}>
                  OPERATION NAME:
                </label>
                <input
                  type="text"
                  value={newJob.name}
                  onChange={(e) =>
                    setNewJob({ ...newJob, name: e.target.value })
                  }
                  required
                  placeholder={
                    newJob.config?.batch_mode
                      ? "Batch Scraper from Crawler"
                      : "My Scraping Job"
                  }
                  className="cyber-input"
                  style={{ width: "100%" }}
                />
              </div>

              {!newJob.config?.batch_mode && (
                <div>
                  <label className="cyber-text" style={{
                    display: "block",
                    marginBottom: "8px",
                    fontWeight: "600",
                    color: "var(--metal-silver)"
                  }}>
                    TARGET URL:
                  </label>
                  <input
                    type="url"
                    value={newJob.url}
                    onChange={(e) =>
                      setNewJob({ ...newJob, url: e.target.value })
                    }
                    required
                    placeholder="https://example.com"
                    className="cyber-input"
                    style={{ width: "100%" }}
                  />
                </div>
              )}

              <div>
                <label className="cyber-text" style={{
                  display: "block",
                  marginBottom: "8px",
                  fontWeight: "600",
                  color: "var(--metal-silver)"
                }}>
                  OPERATION TYPE:
                </label>
                <select
                  value={newJob.scraper_type}
                  onChange={(e) =>
                    setNewJob({
                      ...newJob,
                      scraper_type: e.target.value as "intelligent" | "custom",
                    })
                  }
                  className="cyber-input"
                  style={{ width: "100%" }}
                >
                  <option value="intelligent">🤖 Intelligent Scraping</option>
                  <option value="custom">⚙️ Custom Selectors</option>
                </select>
              </div>

              <button
                type="submit"
                disabled={isSubmitting || (!newJob.url && !newJob.config?.batch_mode)}
                className={`cyber-button ${isSubmitting ? '' : 'cyber-button-orange'}`}
                style={{
                  minWidth: "140px",
                  opacity: (isSubmitting || (!newJob.url && !newJob.config?.batch_mode)) ? 0.5 : 1,
                  cursor: (isSubmitting || (!newJob.url && !newJob.config?.batch_mode)) ? "not-allowed" : "pointer"
                }}
              >
                {isSubmitting ? (
                  <span style={{ display: "flex", alignItems: "center", gap: "8px" }}>
                    <div className="cyber-loading"></div>
                    PROCESSING...
                  </span>
                ) : newJob.config?.batch_mode ? (
                  "🚀 LAUNCH BATCH"
                ) : (
                  "⚡ DEPLOY"
                )}
              </button>
            </form>
          </div>

          {/* Enhanced Crawling Options */}
          <div className="cyber-card" style={{ marginTop: "30px" }}>
            <h3 className="cyber-subtitle" style={{ marginBottom: "20px" }}>
              ⚙️ ADVANCED CONFIGURATION
            </h3>
            
            {/* Basic Options */}
            <div style={{ marginBottom: "25px" }}>
              <h4 className="cyber-text" style={{ 
                margin: "0 0 15px 0", 
                color: "var(--neon-orange)",
                fontWeight: "600"
              }}>
                🚀 BASIC SETTINGS
              </h4>
              <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: "20px" }}>
                <label className="cyber-text" style={{ 
                  display: "flex", 
                  alignItems: "center", 
                  gap: "12px", 
                  cursor: "pointer",
                  padding: "10px",
                  background: "rgba(192, 192, 192, 0.05)",
                  borderRadius: "6px",
                  border: "1px solid var(--border-muted)"
                }}>
                  <input
                    type="checkbox"
                    checked={newJob.config?.extract_full_html || false}
                    onChange={(e) =>
                      setNewJob({
                        ...newJob,
                        config: {
                          ...newJob.config,
                          extract_full_html: e.target.checked,
                        },
                      })
                    }
                    style={{ accentColor: "var(--metal-silver)" }}
                  />
                  <span style={{ fontWeight: "500" }}>Extract Full HTML</span>
                </label>
                <label className="cyber-text" style={{ 
                  display: "flex", 
                  alignItems: "center", 
                  gap: "12px", 
                  cursor: "pointer",
                  padding: "10px",
                  background: "rgba(192, 192, 192, 0.05)",
                  borderRadius: "6px",
                  border: "1px solid var(--border-muted)"
                }}>
                  <input
                    type="checkbox"
                    checked={newJob.config?.save_to_database !== false}
                    onChange={(e) =>
                      setNewJob({
                        ...newJob,
                        config: {
                          ...newJob.config,
                          save_to_database: e.target.checked,
                        },
                      })
                    }
                    style={{ accentColor: "var(--metal-silver)" }}
                  />
                  <span style={{ fontWeight: "500" }}>Save to Database</span>
                </label>
              </div>
            </div>

            {/* Crawling Options */}
            <div style={{ marginBottom: "25px" }}>
              <h4 className="cyber-text" style={{ 
                margin: "0 0 15px 0", 
                color: "var(--metal-gold)",
                fontWeight: "600"
              }}>
                ⚙️ CRAWLING PROTOCOLS
              </h4>
              <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: "20px" }}>
                <label className="cyber-text" style={{ 
                  display: "flex", 
                  alignItems: "center", 
                  gap: "12px", 
                  cursor: "pointer",
                  padding: "10px",
                  background: "rgba(192, 192, 192, 0.05)",
                  borderRadius: "6px",
                  border: "1px solid var(--border-muted)"
                }}>
                  <input
                    type="checkbox"
                    checked={newJob.config?.crawl_links !== false}
                    onChange={(e) =>
                      setNewJob({
                        ...newJob,
                        config: {
                          ...newJob.config,
                          crawl_links: e.target.checked,
                        },
                      })
                    }
                    style={{ accentColor: "var(--metal-silver)" }}
                  />
                  <span style={{ fontWeight: "500" }}>Enable Link Crawling</span>
                </label>
                <label className="cyber-text" style={{ 
                  display: "flex", 
                  alignItems: "center", 
                  gap: "12px", 
                  cursor: "pointer",
                  padding: "10px",
                  background: "rgba(192, 192, 192, 0.05)",
                  borderRadius: "6px",
                  border: "1px solid var(--border-muted)"
                }}>
                  <input
                    type="checkbox"
                    checked={newJob.config?.follow_internal_links !== false}
                    onChange={(e) =>
                      setNewJob({
                        ...newJob,
                        config: {
                          ...newJob.config,
                          follow_internal_links: e.target.checked,
                        },
                      })
                    }
                    style={{ accentColor: "var(--metal-silver)" }}
                  />
                  <span style={{ fontWeight: "500" }}>Follow Internal Links</span>
                </label>
                <label className="cyber-text" style={{ 
                  display: "flex", 
                  alignItems: "center", 
                  gap: "12px", 
                  cursor: "pointer",
                  padding: "10px",
                  background: "rgba(192, 192, 192, 0.05)",
                  borderRadius: "6px",
                  border: "1px solid var(--border-muted)"
                }}>
                  <input
                    type="checkbox"
                    checked={newJob.config?.follow_external_links || false}
                    onChange={(e) =>
                      setNewJob({
                        ...newJob,
                        config: {
                          ...newJob.config,
                          follow_external_links: e.target.checked,
                        },
                      })
                    }
                    style={{ accentColor: "var(--metal-silver)" }}
                  />
                  <span style={{ fontWeight: "500" }}>Follow External Links</span>
                </label>
                <label className="cyber-text" style={{ 
                  display: "flex", 
                  alignItems: "center", 
                  gap: "12px", 
                  cursor: "pointer",
                  padding: "10px",
                  background: "rgba(192, 192, 192, 0.05)",
                  borderRadius: "6px",
                  border: "1px solid var(--border-muted)"
                }}>
                  <input
                    type="checkbox"
                    checked={newJob.config?.crawl_entire_domain || false}
                    onChange={(e) =>
                      setNewJob({
                        ...newJob,
                        config: {
                          ...newJob.config,
                          crawl_entire_domain: e.target.checked,
                        },
                      })
                    }
                    style={{ accentColor: "var(--metal-silver)" }}
                  />
                  <span style={{ fontWeight: "500" }}>Crawl Entire Domain</span>
                </label>
              </div>
            </div>

            {/* Content Options */}
            <div style={{ marginBottom: "25px" }}>
              <h4 className="cyber-text" style={{ 
                margin: "0 0 15px 0", 
                color: "var(--metal-gold)",
                fontWeight: "600"
              }}>
                � DATA EXTRACTION
              </h4>
              <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: "20px" }}>
                <label className="cyber-text" style={{ 
                  display: "flex", 
                  alignItems: "center", 
                  gap: "12px", 
                  cursor: "pointer",
                  padding: "10px",
                  background: "rgba(192, 192, 192, 0.05)",
                  borderRadius: "6px",
                  border: "1px solid var(--border-muted)"
                }}>
                  <input
                    type="checkbox"
                    checked={newJob.config?.include_images || false}
                    onChange={(e) =>
                      setNewJob({
                        ...newJob,
                        config: {
                          ...newJob.config,
                          include_images: e.target.checked,
                        },
                      })
                    }
                    style={{ accentColor: "var(--metal-silver)" }}
                  />
                  <span style={{ fontWeight: "500" }}>Include Images</span>
                </label>
                <label className="cyber-text" style={{ 
                  display: "flex", 
                  alignItems: "center", 
                  gap: "12px", 
                  cursor: "pointer",
                  padding: "10px",
                  background: "rgba(192, 192, 192, 0.05)",
                  borderRadius: "6px",
                  border: "1px solid var(--border-muted)"
                }}>
                  <input
                    type="checkbox"
                    checked={newJob.config?.include_forms || false}
                    onChange={(e) =>
                      setNewJob({
                        ...newJob,
                        config: {
                          ...newJob.config,
                          include_forms: e.target.checked,
                        },
                      })
                    }
                    style={{ accentColor: "var(--metal-silver)" }}
                  />
                  <span style={{ fontWeight: "500" }}>Include Forms</span>
                </label>
                <label className="cyber-text" style={{ 
                  display: "flex", 
                  alignItems: "center", 
                  gap: "12px", 
                  cursor: "pointer",
                  padding: "10px",
                  background: "rgba(192, 192, 192, 0.05)",
                  borderRadius: "6px",
                  border: "1px solid var(--border-muted)"
                }}>
                  <input
                    type="checkbox"
                    checked={newJob.config?.include_scripts || false}
                    onChange={(e) =>
                      setNewJob({
                        ...newJob,
                        config: {
                          ...newJob.config,
                          include_scripts: e.target.checked,
                        },
                      })
                    }
                    style={{ accentColor: "var(--metal-silver)" }}
                  />
                  <span style={{ fontWeight: "500" }}>Include Scripts</span>
                </label>
                <label className="cyber-text" style={{ 
                  display: "flex", 
                  alignItems: "center", 
                  gap: "12px", 
                  cursor: "pointer",
                  padding: "10px",
                  background: "rgba(192, 192, 192, 0.05)",
                  borderRadius: "6px",
                  border: "1px solid var(--border-muted)"
                }}>
                  <input
                    type="checkbox"
                    checked={newJob.config?.extract_metadata || false}
                    onChange={(e) =>
                      setNewJob({
                        ...newJob,
                        config: {
                          ...newJob.config,
                          extract_metadata: e.target.checked,
                        },
                      })
                    }
                    style={{ accentColor: "var(--metal-silver)" }}
                  />
                  <span style={{ fontWeight: "500" }}>Extract Metadata</span>
                </label>
              </div>
            </div>

            {/* Limits and Performance */}
            <div style={{ marginBottom: "25px" }}>
              <h4 className="cyber-text" style={{ 
                margin: "0 0 15px 0", 
                color: "var(--metal-gold)",
                fontWeight: "600"
              }}>
                🔧 SYSTEM PARAMETERS
              </h4>
              <div style={{ display: "grid", gridTemplateColumns: "repeat(4, 1fr)", gap: "20px" }}>
                <div>
                  <label className="cyber-text" style={{ 
                    display: "block", 
                    marginBottom: "8px", 
                    fontWeight: "600",
                    color: "var(--metal-silver)"
                  }}>
                    SCAN DEPTH:
                  </label>
                  <input
                    type="number"
                    value={newJob.config?.max_depth || 3}
                    onChange={(e) =>
                      setNewJob({
                        ...newJob,
                        config: {
                          ...newJob.config,
                          max_depth: parseInt(e.target.value) || 3,
                        },
                      })
                    }
                    className="cyber-input"
                    style={{ width: "100%" }}
                    min="1"
                    max="10"
                  />
                </div>
                <div>
                  <label className="cyber-text" style={{ 
                    display: "block", 
                    marginBottom: "8px", 
                    fontWeight: "600",
                    color: "var(--metal-silver)"
                  }}>
                    LINK LIMIT:
                  </label>
                  <input
                    type="number"
                    value={newJob.config?.max_links || 100}
                    onChange={(e) =>
                      setNewJob({
                        ...newJob,
                        config: {
                          ...newJob.config,
                          max_links: parseInt(e.target.value) || 100,
                        },
                      })
                    }
                    className="cyber-input"
                    style={{ width: "100%" }}
                    min="1"
                    max="10000"
                  />
                </div>
                <div>
                  <label className="cyber-text" style={{ 
                    display: "block", 
                    marginBottom: "8px", 
                    fontWeight: "600",
                    color: "var(--metal-silver)"
                  }}>
                    PAGE LIMIT:
                  </label>
                  <input
                    type="number"
                    value={newJob.config?.max_pages || 15}
                    onChange={(e) =>
                      setNewJob({
                        ...newJob,
                        config: {
                          ...newJob.config,
                          max_pages: parseInt(e.target.value) || 15,
                        },
                      })
                    }
                    className="cyber-input"
                    style={{ width: "100%" }}
                    min="1"
                    max="10000"
                  />
                </div>
                <div>
                  <label className="cyber-text" style={{ 
                    display: "block", 
                    marginBottom: "8px", 
                    fontWeight: "600",
                    color: "var(--metal-silver)"
                  }}>
                    THROTTLE (MS):
                  </label>
                  <input
                    type="number"
                    value={newJob.config?.delay || 1000}
                    onChange={(e) =>
                      setNewJob({
                        ...newJob,
                        config: {
                          ...newJob.config,
                          delay: parseInt(e.target.value) || 1000,
                        },
                      })
                    }
                    className="cyber-input"
                    style={{ width: "100%" }}
                    min="0"
                    max="10000"
                  />
                </div>
              </div>
            </div>

            {/* Pattern Filtering */}
            <div style={{ marginBottom: "25px" }}>
              <h4 className="cyber-text" style={{ 
                margin: "0 0 15px 0", 
                color: "var(--metal-gold)",
                fontWeight: "600"
              }}>
                🔍 PATTERN FILTERS
              </h4>
              <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: "20px" }}>
                <div>
                  <label className="cyber-text" style={{ 
                    display: "block", 
                    marginBottom: "8px", 
                    fontWeight: "600",
                    color: "var(--metal-silver)"
                  }}>
                    INCLUDE PATTERNS:
                  </label>
                  <textarea
                    value={newJob.config?.include_patterns?.join('\n') || ''}
                    onChange={(e) =>
                      setNewJob({
                        ...newJob,
                        config: {
                          ...newJob.config,
                          include_patterns: e.target.value.split('\n').filter(p => p.trim()),
                        },
                      })
                    }
                    className="cyber-input"
                    style={{
                      width: "100%",
                      height: "100px",
                      resize: "vertical",
                      fontFamily: "'Rajdhani', monospace"
                    }}
                    placeholder="Enter patterns, one per line&#10;Example: /blog/*&#10;Example: *article*"
                  />
                </div>
                <div>
                  <label className="cyber-text" style={{ 
                    display: "block", 
                    marginBottom: "8px", 
                    fontWeight: "600",
                    color: "var(--metal-silver)"
                  }}>
                    EXCLUDE PATTERNS:
                  </label>
                  <textarea
                    value={newJob.config?.exclude_patterns?.join('\n') || ''}
                    onChange={(e) =>
                      setNewJob({
                        ...newJob,
                        config: {
                          ...newJob.config,
                          exclude_patterns: e.target.value.split('\n').filter(p => p.trim()),
                        },
                      })
                    }
                    className="cyber-input"
                    style={{
                      width: "100%",
                      height: "100px",
                      resize: "vertical",
                      fontFamily: "'Rajdhani', monospace"
                    }}
                    placeholder="Enter patterns to exclude, one per line&#10;Example: */admin/*&#10;Example: *.pdf"
                  />
                </div>
              </div>
            </div>

            {/* Advanced Options */}
            <div>
              <h4 className="cyber-text" style={{ 
                margin: "0 0 15px 0", 
                color: "var(--metal-gold)",
                fontWeight: "600"
              }}>
                ⚡ ADVANCED CONFIG
              </h4>
              <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: "20px" }}>
                <label className="cyber-text" style={{ 
                  display: "flex", 
                  alignItems: "center", 
                  gap: "12px", 
                  cursor: "pointer",
                  padding: "10px",
                  background: "rgba(192, 192, 192, 0.05)",
                  borderRadius: "6px",
                  border: "1px solid var(--border-muted)"
                }}>
                  <input
                    type="checkbox"
                    checked={newJob.config?.respect_robots_txt || false}
                    onChange={(e) =>
                      setNewJob({
                        ...newJob,
                        config: {
                          ...newJob.config,
                          respect_robots_txt: e.target.checked,
                        },
                      })
                    }
                    style={{ accentColor: "var(--metal-silver)" }}
                  />
                  <span style={{ fontWeight: "500" }}>Respect robots.txt</span>
                </label>
                <label className="cyber-text" style={{ 
                  display: "flex", 
                  alignItems: "center", 
                  gap: "12px", 
                  cursor: "pointer",
                  padding: "10px",
                  background: "rgba(192, 192, 192, 0.05)",
                  borderRadius: "6px",
                  border: "1px solid var(--border-muted)"
                }}>
                  <input
                    type="checkbox"
                    checked={newJob.config?.use_proxy || false}
                    onChange={(e) =>
                      setNewJob({
                        ...newJob,
                        config: {
                          ...newJob.config,
                          use_proxy: e.target.checked,
                        },
                      })
                    }
                    style={{ accentColor: "var(--metal-silver)" }}
                  />
                  <span style={{ fontWeight: "500" }}>Use Proxy</span>
                </label>
                <label className="cyber-text" style={{ 
                  display: "flex", 
                  alignItems: "center", 
                  gap: "12px", 
                  cursor: "pointer",
                  padding: "10px",
                  background: "rgba(192, 192, 192, 0.05)",
                  borderRadius: "6px",
                  border: "1px solid var(--border-muted)"
                }}>
                  <input
                    type="checkbox"
                    checked={newJob.config?.enable_javascript || false}
                    onChange={(e) =>
                      setNewJob({
                        ...newJob,
                        config: {
                          ...newJob.config,
                          enable_javascript: e.target.checked,
                        },
                      })
                    }
                    style={{ accentColor: "var(--metal-silver)" }}
                  />
                  <span style={{ fontWeight: "500" }}>Enable JavaScript</span>
                </label>
                <label className="cyber-text" style={{ 
                  display: "flex", 
                  alignItems: "center", 
                  gap: "12px", 
                  cursor: "pointer",
                  padding: "10px",
                  background: "rgba(192, 192, 192, 0.05)",
                  borderRadius: "6px",
                  border: "1px solid var(--border-muted)"
                }}>
                  <input
                    type="checkbox"
                    checked={newJob.config?.mobile_mode || false}
                    onChange={(e) =>
                      setNewJob({
                        ...newJob,
                        config: {
                          ...newJob.config,
                          mobile_mode: e.target.checked,
                        },
                      })
                    }
                    style={{ accentColor: "var(--metal-silver)" }}
                  />
                  <span style={{ fontWeight: "500" }}>Mobile Mode</span>
                </label>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Dashboard Tab */}
      {currentTab === "dashboard" && (
        <div>
          <div
            style={{
              display: "grid",
              gridTemplateColumns: "repeat(auto-fit, minmax(250px, 1fr))",
              gap: "20px",
              marginBottom: "30px",
            }}
          >
            {analytics && (
              <>
                <div
                  className="cyber-glass"
                  style={{
                    padding: "20px",
                    borderRadius: "8px",
                    border: "1px solid var(--border-primary)",
                  }}
                >
                  <h3 style={{ margin: "0 0 10px 0", color: "var(--metal-silver)" }}>
                    Total Jobs
                  </h3>
                  <div style={{ fontSize: "2em", fontWeight: "bold", color: "var(--text-primary)" }}>
                    {analytics.total_jobs}
                  </div>
                </div>
                <div
                  className="cyber-glass"
                  style={{
                    padding: "20px",
                    borderRadius: "8px",
                    border: "1px solid var(--metal-gold)",
                  }}
                >
                  <h3 style={{ margin: "0 0 10px 0", color: "var(--metal-gold)" }}>
                    Completed
                  </h3>
                  <div style={{ fontSize: "2em", fontWeight: "bold", color: "var(--text-primary)" }}>
                    {analytics.completed_jobs}
                  </div>
                </div>
                <div
                  className="cyber-glass"
                  style={{
                    padding: "20px",
                    borderRadius: "8px",
                    border: "1px solid var(--metal-steel)",
                  }}
                >
                  <h3 style={{ margin: "0 0 10px 0", color: "var(--metal-steel)" }}>
                    Running
                  </h3>
                  <div style={{ fontSize: "2em", fontWeight: "bold", color: "var(--text-primary)" }}>
                    {analytics.running_jobs}
                  </div>
                </div>
                <div
                  className="cyber-glass"
                  style={{
                    padding: "20px",
                    borderRadius: "8px",
                    border: "1px solid var(--metal-copper)",
                  }}
                >
                  <h3 style={{ margin: "0 0 10px 0", color: "var(--metal-copper)" }}>
                    Failed
                  </h3>
                  <div style={{ fontSize: "2em", fontWeight: "bold", color: "var(--text-primary)" }}>
                    {analytics.failed_jobs}
                  </div>
                </div>
              </>
            )}
          </div>

          {/* Recent Jobs */}
          <div
            className="cyber-glass"
            style={{
              padding: "20px",
              borderRadius: "8px",
              marginBottom: "20px",
            }}
          >
            <h2 className="cyber-subtitle" style={{ marginBottom: "20px" }}>🔄 Recent Operations</h2>
            {jobs.slice(0, 5).map((job) => (
              <div
                key={job.id}
                className="cyber-glass"
                style={{
                  padding: "15px",
                  border: "1px solid var(--border-muted)",
                  borderRadius: "5px",
                  marginBottom: "10px",
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                }}
              >
                <div>
                  <strong className="cyber-text" style={{ color: "var(--text-primary)" }}>{job.name}</strong>
                  <div className="cyber-text" style={{ fontSize: "12px", color: "var(--text-muted)" }}>
                    Created: {new Date(job.created_at).toLocaleString()}
                  </div>
                </div>
                <div
                  style={{ display: "flex", gap: "10px", alignItems: "center" }}
                >
                  <span
                    style={{
                      padding: "4px 8px",
                      borderRadius: "12px",
                      fontSize: "12px",
                      backgroundColor:
                        job.status === "completed"
                          ? "var(--metal-gold)"
                          : job.status === "failed"
                            ? "var(--metal-copper)"
                            : job.status === "running"
                              ? "var(--metal-steel)"
                              : "var(--bg-tertiary)",
                      color:
                        job.status === "completed"
                          ? "var(--bg-primary)"
                          : job.status === "failed"
                            ? "var(--text-primary)"
                            : job.status === "running"
                              ? "var(--text-primary)"
                              : "var(--text-secondary)",
                    }}
                  >
                    {job.status}
                  </span>
                  <button
                    onClick={() => getJobDetails(job.id)}
                    className="cyber-button"
                    style={{
                      padding: "4px 8px",
                      fontSize: "12px",
                    }}
                  >
                    Details
                  </button>
                  {job.status === "pending" && (
                    <button
                      onClick={() => startJob(job.id)}
                      className="cyber-button cyber-button-gold"
                      style={{
                        padding: "4px 8px",
                        fontSize: "12px",
                      }}
                    >
                      Start
                    </button>
                  )}
                  {job.status === "completed" && (
                    <button
                      onClick={() => getJobResults(job.id)}
                      className="cyber-button"
                      style={{
                        padding: "4px 8px",
                        fontSize: "12px",
                      }}
                    >
                      View Results
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Jobs Tab */}
      {currentTab === "jobs" && (
        <div>
          <h2>🚀 Job Management & Queue</h2>
          <div style={{ marginBottom: "20px" }}>
            <button
              onClick={() => fetchJobs()}
              style={{
                padding: "8px 16px",
                backgroundColor: "#17a2b8",
                color: "white",
                border: "none",
                borderRadius: "4px",
                cursor: "pointer",
                marginRight: "10px",
              }}
            >
              🔄 Refresh
            </button>
            <span style={{ color: "var(--text-muted)" }}>
              Last updated: {new Date().toLocaleTimeString()}
            </span>
          </div>

          <div style={{ display: "grid", gap: "15px" }}>
            {jobs.map((job) => (
              <div
                key={job.id}
                className="cyber-glass"
                style={{
                  padding: "20px",
                  border: "1px solid var(--border-muted)",
                  borderRadius: "8px",
                }}
              >
                <div
                  style={{
                    display: "flex",
                    justifyContent: "space-between",
                    alignItems: "start",
                    marginBottom: "15px",
                  }}
                >
                  <div>
                    <h3 style={{ margin: "0 0 5px 0" }}>{job.name}</h3>
                    <div style={{ fontSize: "14px", color: "var(--text-muted)" }}>
                      ID: {job.id} • Type: {job.type} • Created:{" "}
                      {new Date(job.created_at).toLocaleString()}
                    </div>
                    <div style={{ fontSize: "14px", color: "var(--text-muted)" }}>
                      Results: {job.results_count} data points
                    </div>
                  </div>
                  <div
                    style={{
                      display: "flex",
                      gap: "10px",
                      alignItems: "center",
                    }}
                  >
                    <span
                      style={{
                        padding: "6px 12px",
                        borderRadius: "15px",
                        fontSize: "14px",
                        fontWeight: "bold",
                        backgroundColor:
                          job.status === "completed"
                            ? "rgba(40, 167, 69, 0.2)"
                            : job.status === "failed"
                              ? "rgba(220, 53, 69, 0.2)"
                              : job.status === "running"
                                ? "rgba(212, 175, 55, 0.2)"
                                : "rgba(113, 121, 126, 0.2)",
                        color:
                          job.status === "completed"
                            ? "#155724"
                            : job.status === "failed"
                              ? "#721c24"
                              : job.status === "running"
                                ? "#856404"
                                : "#383d41",
                      }}
                    >
                      {job.status.toUpperCase()}
                    </span>
                  </div>
                </div>

                <div style={{ display: "flex", gap: "10px" }}>
                  <button
                    onClick={() => getJobDetails(job.id)}
                    style={{
                      padding: "8px 16px",
                      backgroundColor: "#007bff",
                      color: "white",
                      border: "none",
                      borderRadius: "4px",
                      cursor: "pointer",
                    }}
                  >
                    📊 View Details
                  </button>
                  {job.status === "pending" && (
                    <button
                      onClick={() => startJob(job.id)}
                      style={{
                        padding: "8px 16px",
                        backgroundColor: "#28a745",
                        color: "white",
                        border: "none",
                        borderRadius: "4px",
                        cursor: "pointer",
                      }}
                    >
                      ▶️ Start Job
                    </button>
                  )}
                  {job.status === "completed" && (
                    <button
                      onClick={() => getJobResults(job.id)}
                      style={{
                        padding: "8px 16px",
                        backgroundColor: "#17a2b8",
                        color: "white",
                        border: "none",
                        borderRadius: "4px",
                        cursor: "pointer",
                      }}
                    >
                      � View Results
                    </button>
                  )}
                  {job.status === "running" && (
                    <div
                      className="cyber-glass"
                      style={{
                        padding: "8px 16px",
                        color: "var(--gold-color)",
                        border: "1px solid var(--gold-color)",
                        borderRadius: "4px",
                      }}
                    >
                      🔄 Processing...
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>

          {selectedJob && (
            <div
              style={{
                position: "fixed",
                top: "0",
                left: "0",
                right: "0",
                bottom: "0",
                backgroundColor: "rgba(0,0,0,0.5)",
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                zIndex: 1000,
              }}
            >
              <div
                className="cyber-glass"
                style={{
                  backgroundColor: "white",
                  padding: "30px",
                  borderRadius: "8px",
                  maxWidth: "600px",
                  width: "90%",
                  maxHeight: "80%",
                  overflow: "auto",
                }}
              >
                <h2>📊 Job Details: {selectedJob.name}</h2>
                <div style={{ marginBottom: "20px" }}>
                  <div style={{ display: "grid", gap: "8px" }}>
                    <div><strong>Job ID:</strong> {selectedJob.id}</div>
                    <div><strong>Status:</strong> <span style={{ 
                      color: selectedJob.status === 'completed' ? '#28a745' : 
                             selectedJob.status === 'failed' ? '#dc3545' : 
                             selectedJob.status === 'running' ? '#ffc107' : '#6c757d',
                      fontWeight: 'bold'
                    }}>{selectedJob.status}</span></div>
                    <div><strong>Type:</strong> {selectedJob.type}</div>
                    <div><strong>Created:</strong> {new Date(selectedJob.created_at).toLocaleString()}</div>
                    {selectedJob.started_at && (
                      <div><strong>Started:</strong> {new Date(selectedJob.started_at).toLocaleString()}</div>
                    )}
                    {selectedJob.completed_at && (
                      <div><strong>Completed:</strong> {new Date(selectedJob.completed_at).toLocaleString()}</div>
                    )}
                    {selectedJob.results_count && (
                      <div><strong>Results Count:</strong> {selectedJob.results_count}</div>
                    )}
                    {selectedJob.error_message && (
                      <div style={{ color: '#dc3545' }}><strong>Error:</strong> {selectedJob.error_message}</div>
                    )}
                  </div>
                </div>
                
                {/* Configuration Section */}
                <div style={{ marginBottom: "20px" }}>
                  <strong>Configuration:</strong>
                  <div style={{ 
                     backgroundColor: "#f8f9fa",
                    padding: "15px", 
                    borderRadius: "6px",
                    border: "1px solid #e9ecef",
                    marginTop: "8px" 
                  }}>
                    {selectedJob.config && typeof selectedJob.config === 'object' ? (
                      <div style={{ display: "grid", gap: "8px" }}>
                        {selectedJob.config.url && (
                          <div><strong>URL:</strong> <a href={selectedJob.config.url} target="_blank" rel="noopener noreferrer" style={{ color: "#007bff" }}>{selectedJob.config.url}</a></div>
                        )}
                        {selectedJob.config.scraper_type && (
                          <div><strong>Scraper Type:</strong> {selectedJob.config.scraper_type}</div>
                        )}
                        {selectedJob.config.summary && (
                          <div style={{ marginTop: "10px" }}>
                            <strong>Crawling Summary:</strong>
                            <div style={{ fontSize: "14px", marginTop: "5px" }}>
                              {(() => {
                                try {
                                  const summary = typeof selectedJob.config.summary === 'string' 
                                    ? JSON.parse(selectedJob.config.summary)
                                    : selectedJob.config.summary;
                                  return (
                                    <div style={{ display: "grid", gap: "4px" }}>
                                      {summary.pages_processed && <div>📄 Pages Processed: {summary.pages_processed}</div>}
                                      {summary.urls_discovered && <div>🔗 URLs Discovered: {summary.urls_discovered}</div>}
                                      {summary.data_extracted && <div>📊 Data Extracted: {summary.data_extracted}</div>}
                                      {summary.total_crawl_time && <div>⏱️ Crawl Time: {summary.total_crawl_time}s</div>}
                                      {summary.images_extracted !== undefined && summary.images_extracted !== null && <div>🖼️ Images Extracted: {summary.images_extracted}</div>}
                                      {summary.domains_crawled && <div>🌐 Domains: {summary.domains_crawled.join(', ')}</div>}
                                    </div>
                                  );
                                } catch {
                                  return <div>{selectedJob.config.summary}</div>;
                                }
                              })()}
                            </div>
                          </div>
                        )}
                        {selectedJob.config.config && Object.keys(selectedJob.config.config).length > 0 && (
                          <div style={{ marginTop: "10px" }}>
                            <strong>Advanced Config:</strong>
                            <pre style={{ 
                              fontSize: "12px", 
                              marginTop: "5px",
                              backgroundColor: "rgba(0, 0, 0, 0.3)",
                              padding: "8px",
                              borderRadius: "4px",
                              border: "1px solid var(--steel-color)",
                              color: "var(--silver-color)"
                            }}>
                              {JSON.stringify(selectedJob.config.config, null, 2)}
                            </pre>
                          </div>
                        )}
                      </div>
                    ) : (
                      <pre style={{ 
                        fontSize: "12px", 
                        margin: 0,
                        whiteSpace: "pre-wrap",
                        backgroundColor: "rgba(0, 0, 0, 0.3)",
                        padding: "8px",
                        borderRadius: "4px",
                        border: "1px solid var(--steel-color)",
                        color: "var(--silver-color)"
                      }}>
                        {JSON.stringify(selectedJob.config, null, 2)}
                      </pre>
                    )}
                  </div>
                </div>

                {/* Action Buttons */}
                <div style={{ display: "flex", gap: "10px", justifyContent: "flex-end" }}>
                  {selectedJob.status === 'completed' && (
                    <button
                      onClick={() => {
                        const jobId = selectedJob.id;
                        setSelectedJob(null);
                        getJobResults(jobId);
                      }}
                      style={{
                        padding: "10px 20px",
                        backgroundColor: "#28a745",
                        color: "white",
                        border: "none",
                        borderRadius: "4px",
                        cursor: "pointer",
                        fontSize: "14px"
                      }}
                    >
                      📊 View Results
                    </button>
                  )}
                  <button
                    onClick={() => setSelectedJob(null)}
                    style={{
                      padding: "10px 20px",
                      backgroundColor: "#6c757d",
                      color: "white",
                      border: "none",
                      borderRadius: "4px",
                      cursor: "pointer",
                    }}
                  >
                    Close
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Analytics Tab */}
      {currentTab === "analytics" && (
        <div>
          <h2 className="cyber-subtitle">📊 Centralized Analytics & Data Intelligence</h2>

          {/* Data Sources Overview */}
          <div
            className="cyber-glass"
            style={{
              padding: "20px",
              borderRadius: "8px",
              marginBottom: "30px",
            }}
          >
            <h3 className="cyber-text" style={{ color: "var(--metal-gold)" }}>🗄️ Centralized Data Repository</h3>
                {/* Header */}
                <div
                  style={{
                    marginBottom: "20px",
                    borderBottom: "2px solid #e9ecef",
                    paddingBottom: "15px",
                  }}
                >
                  <div
                    style={{
                      display: "flex",
                      justifyContent: "space-between",
                      alignItems: "center",
                    }}
                  >
                    <div>
                      <h2 style={{ margin: "0 0 5px 0", color: "var(--metal-silver)", fontSize: "24px", fontWeight: "bold" }}>
                        � Job Results: {jobResults.job_name}
                      </h2>
                      <div style={{ fontSize: "14px", color: "var(--text-muted)" }}>
                        Job ID: {jobResults.job_id} • Total Records:{" "}
                        {jobResults.total_count} • Status: {jobResults.status}
                      </div>
                      <div
                        style={{
                          fontSize: "12px",
                          color: "var(--text-muted)",
                          marginTop: "2px",
                        }}
                      >
                        Completed:{" "}
                        {jobResults.completed_at
                          ? new Date(jobResults.completed_at).toLocaleString()
                          : "N/A"}
                      </div>
                    </div>
                    <button
                      onClick={() => setJobResults(null)}
                      style={{
                        padding: "8px 16px",
                        backgroundColor: "#dc3545",
                        color: "white",
                        border: "none",
                        borderRadius: "6px",
                        cursor: "pointer",
                        fontSize: "14px",
                      }}
                    >
                      ✕ Close
                    </button>
                  </div>
                </div>

                {/* Controls */}
                <div
                  style={{
                    display: "flex",
                    gap: "15px",
                    marginBottom: "20px",
                    alignItems: "center",
                    flexWrap: "wrap",
                  }}
                >
                  <div style={{ flex: "1", minWidth: "300px" }}>
                    <input
                      type="text"
                      placeholder="🔍 Search results..."
                      value={resultsSearchTerm}
                      onChange={(e) => {
                        setResultsSearchTerm(e.target.value);
                        setCurrentPage(1); // Reset to first page on search
                      }}
                      style={{
                        width: "100%",
                        padding: "10px",
                        border: "1px solid var(--border-muted)",
                        borderRadius: "6px",
                        fontSize: "14px",
                      }}
                    />
                  </div>
                  <div
                    style={{
                      display: "flex",
                      alignItems: "center",
                      gap: "10px",
                    }}
                  >
                    <label style={{ fontSize: "14px", whiteSpace: "nowrap" }}>
                      Items per page:
                    </label>
                    <select
                      value={itemsPerPage}
                      onChange={(e) => {
                        setItemsPerPage(parseInt(e.target.value));
                        setCurrentPage(1); // Reset to first page
                      }}
                      style={{
                        padding: "8px",
                        border: "1px solid var(--border-muted)",
                        borderRadius: "4px",
                        fontSize: "14px",
                      }}
                    >
                      <option value={5}>5</option>
                      <option value={10}>10</option>
                      <option value={25}>25</option>
                      <option value={50}>50</option>
                      <option value={100}>100</option>
                    </select>
                  </div>
                  <button
                    onClick={async () => {
                      // Send to centralized database
                      try {
                        const response = await fetch(
                          "http://localhost:8000/api/data/centralize",
                          {
                            method: "POST",
                            headers: {
                              "Content-Type": "application/json",
                              Authorization: `Bearer ${token}`,
                            },
                            body: JSON.stringify({
                              job_id: jobResults.job_id,
                              job_name: jobResults.job_name,
                              data: jobResults.data,
                              metadata: {
                                total_count: jobResults.total_count,
                                status: jobResults.status,
                                created_at: jobResults.created_at,
                                completed_at: jobResults.completed_at,
                              },
                            }),
                          },
                        );

                        if (response.ok) {
                          alert(
                            "✅ Data successfully added to centralized database!",
                          );
                        } else {
                          alert("❌ Failed to centralize data");
                        }
                      } catch (error) {
                        console.error("Centralization error:", error);
                        alert(
                          "✅ Data queued for centralization (offline mode)",
                        );
                      }
                    }}
                    style={{
                      padding: "10px 20px",
                      backgroundColor: "#6f42c1",
                      color: "white",
                      border: "none",
                      borderRadius: "6px",
                      cursor: "pointer",
                      fontSize: "14px",
                      whiteSpace: "nowrap",
                    }}
                  >
                    🗄️ Centralize Data
                  </button>
                  <button
                    onClick={() => {
                      const dataStr = JSON.stringify(jobResults.data, null, 2);
                      const blob = new Blob([dataStr], {
                        type: "application/json",
                      });
                      const url = URL.createObjectURL(blob);
                      const a = document.createElement("a");
                      a.href = url;
                      a.download = `${jobResults.job_name}_results.json`;
                      a.click();
                      URL.revokeObjectURL(url);
                    }}
                    style={{
                      padding: "10px 20px",
                      backgroundColor: "#28a745",
                      color: "white",
                      border: "none",
                      borderRadius: "6px",
                      cursor: "pointer",
                      fontSize: "14px",
                      whiteSpace: "nowrap",
                    }}
                  >
                    💾 Export JSON
                  </button>
                  <button
                    onClick={() => {
                      if (jobResults.data.length === 0) return;
                      const headers = Object.keys(jobResults.data[0]);
                      const csvContent = [
                        headers.join(","),
                        ...jobResults.data.map((row) =>
                          headers
                            .map((header) =>
                              typeof row[header] === "string"
                                ? `"${row[header].replace(/"/g, '""')}"`
                                : row[header],
                            )
                            .join(","),
                        ),
                      ].join("\n");
                      const blob = new Blob([csvContent], { type: "text/csv" });
                      const url = URL.createObjectURL(blob);
                      const a = document.createElement("a");
                      a.href = url;
                      a.download = `${jobResults.job_name}_results.csv`;
                      a.click();
                      URL.revokeObjectURL(url);
                    }}
                    style={{
                      padding: "10px 20px",
                      backgroundColor: "#17a2b8",
                      color: "white",
                      border: "none",
                      borderRadius: "6px",
                      cursor: "pointer",
                      fontSize: "14px",
                      whiteSpace: "nowrap",
                    }}
                  >
                    📄 Export CSV
                  </button>
                  <button
                    onClick={async () => {
                      if (!jobResults.data.length) return;

                      // Enhanced URL extraction - try multiple approaches
                      let urls: string[] = [];

                      // First, try the backend API extraction
                      try {
                        const backendUrls = await extractUrlsFromCrawler(
                          jobResults.job_id,
                        );
                        if (backendUrls.length > 0) {
                          urls = backendUrls;
                        }
                      } catch (error) {
                        console.log(
                          "Backend extraction failed, trying client-side extraction",
                        );
                      }

                      // If backend didn't work, try direct client-side extraction from current data
                      if (urls.length === 0 && jobResults.data) {
                        console.log(
                          "Attempting direct URL extraction from job results data:",
                          jobResults.data,
                        );

                        jobResults.data.forEach((item: any, index: number) => {
                          console.log(`Examining item ${index}:`, item);

                          // Check all possible URL fields
                          const possibleUrlFields = [
                            "url",
                            "link",
                            "href",
                            "page_url",
                            "discovered_url",
                            "target_url",
                            "source_url",
                            "canonical_url",
                            "original_url",
                            "crawled_url",
                            "found_url",
                            "extracted_url",
                            "site_url",
                            "web_url",
                          ];

                          // Check direct fields
                          for (const field of possibleUrlFields) {
                            if (item[field]) {
                              const value = item[field];
                              if (
                                typeof value === "string" &&
                                (value.startsWith("http://") ||
                                  value.startsWith("https://"))
                              ) {
                                urls.push(value);
                                console.log(
                                  `Found URL in field '${field}':`,
                                  value,
                                );
                              }
                            }
                          }

                          // Check for arrays of links
                          if (item.links && Array.isArray(item.links)) {
                            item.links.forEach(
                              (link: any, linkIndex: number) => {
                                if (
                                  typeof link === "string" &&
                                  (link.startsWith("http://") ||
                                    link.startsWith("https://"))
                                ) {
                                  urls.push(link);
                                  console.log(
                                    `Found URL in links array[${linkIndex}]:`,
                                    link,
                                  );
                                } else if (link && typeof link === "object") {
                                  possibleUrlFields.forEach((field) => {
                                    if (
                                      link[field] &&
                                      typeof link[field] === "string" &&
                                      (link[field].startsWith("http://") ||
                                        link[field].startsWith("https://"))
                                    ) {
                                      urls.push(link[field]);
                                      console.log(
                                        `Found URL in links[${linkIndex}].${field}:`,
                                        link[field],
                                      );
                                    }
                                  });
                                }
                              },
                            );
                          }

                          // Check for nested objects that might contain URLs
                          Object.keys(item).forEach((key) => {
                            const value = item[key];
                            if (
                              value &&
                              typeof value === "object" &&
                              !Array.isArray(value)
                            ) {
                              possibleUrlFields.forEach((field) => {
                                if (
                                  value[field] &&
                                  typeof value[field] === "string" &&
                                  (value[field].startsWith("http://") ||
                                    value[field].startsWith("https://"))
                                ) {
                                  urls.push(value[field]);
                                  console.log(
                                    `Found URL in nested object ${key}.${field}:`,
                                    value[field],
                                  );
                                }
                              });
                            }
                          });
                        });

                        // Remove duplicates
                        urls = [...new Set(urls)];
                        console.log(
                          `Total unique URLs found: ${urls.length}`,
                          urls,
                        );
                      }

                      if (urls.length > 0) {
                        // Switch to the dashboard tab and prepare for batch scraping
                        setCurrentTab("dashboard");
                        setNewJob((prev) => ({
                          ...prev,
                          name: `Scraper from ${jobResults.job_name}`,
                          config: {
                            ...prev.config,
                            batch_mode: true,
                            source_crawler_job_id: jobResults.job_id,
                            extracted_urls: urls,
                          },
                        }));
                        setSelectedCrawlerJob(jobResults.job_id);
                        setExtractedUrls(urls);
                        setJobResults(null); // Close the modal

                        alert(
                          `✅ Found ${urls.length} URLs! Switched to dashboard to create batch scraping jobs.`,
                        );
                      } else {
                        alert(
                          `❌ No URLs found in this job's results.\n\nJob has ${jobResults.data.length} data items. Make sure the data contains URL fields like "url", "link", or "href".`,
                        );
                      }
                    }}
                    style={{
                      padding: "10px 20px",
                      backgroundColor: "#fd7e14",
                      color: "white",
                      border: "none",
                      borderRadius: "6px",
                      cursor: "pointer",
                      fontSize: "14px",
                      whiteSpace: "nowrap",
                    }}
                  >
                    🕷️ Use for Scraping
                  </button>
                </div>

                {/* Results Display */}
                <div
                  style={{
                    flex: "1",
                    overflow: "auto",
                    border: "1px solid #e9ecef",
                    borderRadius: "8px",
                    
                  }}
                >
                  {jobResults.data && jobResults.data.length > 0 ? (
                    <div>
                      {/* Filter results based on search */}
                      {(() => {
                        const filteredData = jobResults.data.filter(
                          (item) =>
                            !resultsSearchTerm ||
                            JSON.stringify(item)
                              .toLowerCase()
                              .includes(resultsSearchTerm.toLowerCase()),
                        );

                        if (filteredData.length === 0) {
                          return (
                            <div
                              style={{
                                padding: "40px",
                                textAlign: "center",
                                color: "var(--text-muted)",
                              }}
                            >
                              {resultsSearchTerm
                                ? `No results found for "${resultsSearchTerm}"`
                                : "No data available"}
                            </div>
                          );
                        }

                        return (
                          <div>
                            {/* Pagination Info */}
                            <div
                              style={{
                                padding: "10px 15px",
                                backgroundColor: "#fff",
                                borderBottom: "1px solid #e9ecef",
                                fontSize: "14px",
                                color: "var(--text-muted)",
                                display: "flex",
                                justifyContent: "space-between",
                                alignItems: "center",
                              }}
                            >
                              <div>
                                Showing {(currentPage - 1) * itemsPerPage + 1}{" "}
                                to{" "}
                                {Math.min(
                                  currentPage * itemsPerPage,
                                  filteredData.length,
                                )}{" "}
                                of {filteredData.length} results
                                {resultsSearchTerm &&
                                  ` (filtered by "${resultsSearchTerm}")`}
                                {filteredData.length !==
                                  jobResults.total_count &&
                                  ` • Total in job: ${jobResults.total_count}`}
                              </div>
                              <div
                                style={{
                                  display: "flex",
                                  alignItems: "center",
                                  gap: "10px",
                                }}
                              >
                                {/* Pagination Controls */}
                                {(() => {
                                  const totalPages = Math.ceil(
                                    filteredData.length / itemsPerPage,
                                  );

                                  return (
                                    <div
                                      style={{
                                        display: "flex",
                                        alignItems: "center",
                                        gap: "5px",
                                      }}
                                    >
                                      <button
                                        disabled={currentPage === 1}
                                        onClick={() => setCurrentPage(1)}
                                        style={{
                                          padding: "4px 8px",
                                          border: "1px solid var(--border-muted)",
                                          borderRadius: "4px",
                                          backgroundColor:
                                            currentPage === 1
                                              ? "#f8f9fa"
                                              : "white",
                                          cursor:
                                            currentPage === 1
                                              ? "not-allowed"
                                              : "pointer",
                                          fontSize: "12px",
                                        }}
                                      >
                                        ⏮️
                                      </button>
                                      <button
                                        disabled={currentPage === 1}
                                        onClick={() =>
                                          setCurrentPage(currentPage - 1)
                                        }
                                        style={{
                                          padding: "4px 8px",
                                          border: "1px solid var(--border-muted)",
                                          borderRadius: "4px",
                                          backgroundColor:
                                            currentPage === 1
                                              ? "#f8f9fa"
                                              : "white",
                                          cursor:
                                            currentPage === 1
                                              ? "not-allowed"
                                              : "pointer",
                                          fontSize: "12px",
                                        }}
                                      >
                                        ⏪
                                      </button>
                                      <span
                                        style={{
                                          padding: "4px 8px",
                                          fontSize: "12px",
                                        }}
                                      >
                                        Page {currentPage} of {totalPages}
                                      </span>
                                      <button
                                        disabled={currentPage === totalPages}
                                        onClick={() =>
                                          setCurrentPage(currentPage + 1)
                                        }
                                        style={{
                                          padding: "4px 8px",
                                          border: "1px solid var(--border-muted)",
                                          borderRadius: "4px",
                                          backgroundColor:
                                            currentPage === totalPages
                                              ? "#f8f9fa"
                                              : "white",
                                          cursor:
                                            currentPage === totalPages
                                              ? "not-allowed"
                                              : "pointer",
                                          fontSize: "12px",
                                        }}
                                      >
                                        ⏩
                                      </button>
                                      <button
                                        disabled={currentPage === totalPages}
                                        onClick={() =>
                                          setCurrentPage(totalPages)
                                        }
                                        style={{
                                          padding: "4px 8px",
                                          border: "1px solid var(--border-muted)",
                                          borderRadius: "4px",
                                          backgroundColor:
                                            currentPage === totalPages
                                              ? "#f8f9fa"
                                              : "white",
                                          cursor:
                                            currentPage === totalPages
                                              ? "not-allowed"
                                              : "pointer",
                                          fontSize: "12px",
                                        }}
                                      >
                                        ⏭️
                                      </button>
                                    </div>
                                  );
                                })()}
                              </div>
                            </div>

                            <div style={{ padding: "15px" }}>
                              <div style={{ display: "grid", gap: "15px" }}>
                                {(() => {
                                  const startIndex =
                                    (currentPage - 1) * itemsPerPage;
                                  const endIndex = Math.min(
                                    startIndex + itemsPerPage,
                                    filteredData.length,
                                  );
                                  const paginatedData = filteredData.slice(
                                    startIndex,
                                    endIndex,
                                  );

                                  return paginatedData.map((item, index) => (
                                    <div
                                      key={startIndex + index}
                                      style={{
                                        
                                        padding: "20px",
                                        borderRadius: "8px",
                                        border: "1px solid #e9ecef",
                                        boxShadow: "0 2px 4px rgba(0,0,0,0.1)",
                                      }}
                                    >
                                      <div
                                        style={{
                                          display: "flex",
                                          justifyContent: "space-between",
                                          alignItems: "center",
                                          marginBottom: "15px",
                                        }}
                                      >
                                        <div
                                          style={{
                                            fontSize: "12px",
                                            color: "var(--text-muted)",
                                            
                                            padding: "4px 8px",
                                            borderRadius: "12px",
                                            fontWeight: "bold",
                                          }}
                                        >
                                          Record #{startIndex + index + 1} of{" "}
                                          {filteredData.length}
                                        </div>
                                        {item.url && (
                                          <a
                                            href={item.url}
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            style={{
                                              fontSize: "12px",
                                              color: "#007bff",
                                              textDecoration: "none",
                                            }}
                                          >
                                            🔗 View Source
                                          </a>
                                        )}
                                      </div>
                                      <div
                                        style={{ display: "grid", gap: "8px" }}
                                      >
                                        {Object.entries(item).map(
                                          ([key, value]) => (
                                            <div
                                              key={key}
                                              style={{
                                                display: "flex",
                                                flexDirection: "column",
                                              }}
                                            >
                                              <span
                                                style={{
                                                  fontSize: "12px",
                                                  fontWeight: "bold",
                                                  color: "#495057",
                                                  textTransform: "capitalize",
                                                  marginBottom: "2px",
                                                }}
                                              >
                                                {key.replace(/_/g, " ")}:
                                              </span>
                                              <span
                                                style={{
                                                  fontSize: "14px",
                                                  color: "#212529",
                                                  wordBreak: "break-word",
                                                  
                                                  padding: "6px 8px",
                                                  borderRadius: "4px",
                                                  border: "1px solid #e9ecef",
                                                }}
                                              >
                                                {key === "url" ? (
                                                  <a
                                                    href={value as string}
                                                    target="_blank"
                                                    rel="noopener noreferrer"
                                                    style={{ color: "#007bff" }}
                                                  >
                                                    {typeof value === "string"
                                                      ? value.length > 200
                                                        ? value.substring(
                                                            0,
                                                            200,
                                                          ) + "..."
                                                        : value
                                                      : JSON.stringify(value)}
                                                  </a>
                                                ) : key === "images" && Array.isArray(value) ? (
                                                  <div style={{ display: "flex", flexDirection: "column", gap: "8px" }}>
                                                    {value.slice(0, 5).map((img: any, imgIndex: number) => (
                                                      <div key={imgIndex} style={{ 
                                                        display: "flex", 
                                                        alignItems: "center", 
                                                        gap: "10px",
                                                        padding: "8px",
                                                        
                                                        borderRadius: "4px",
                                                        border: "1px solid var(--border-muted)"
                                                      }}>
                                                        <img 
                                                          src={img.src || img.url} 
                                                          alt={img.alt || `Image ${imgIndex + 1}`}
                                                          style={{ 
                                                            width: "60px", 
                                                            height: "60px", 
                                                            objectFit: "cover",
                                                            borderRadius: "4px",
                                                            border: "1px solid var(--border-muted)"
                                                          }}
                                                          onError={(e) => {
                                                            (e.target as HTMLImageElement).style.display = 'none';
                                                          }}
                                                        />
                                                        <div style={{ flex: 1, fontSize: "12px" }}>
                                                          <div style={{ fontWeight: "bold", marginBottom: "2px" }}>
                                                            {img.alt || img.title || `Image ${imgIndex + 1}`}
                                                          </div>
                                                          <a 
                                                            href={img.src || img.url} 
                                                            target="_blank" 
                                                            rel="noopener noreferrer"
                                                            style={{ color: "#007bff", fontSize: "11px" }}
                                                          >
                                                            🔗 View Full Size
                                                          </a>
                                                        </div>
                                                      </div>
                                                    ))}
                                                    {value.length > 5 && (
                                                      <div style={{ fontSize: "12px", color: "var(--text-muted)", fontStyle: "italic" }}>
                                                        ... and {value.length - 5} more images
                                                      </div>
                                                    )}
                                                  </div>
                                                ) : typeof value ===
                                                  "string" ? (
                                                  value.length > 200 ? (
                                                    value.substring(0, 200) +
                                                    "..."
                                                  ) : (
                                                    value
                                                  )
                                                ) : (
                                                  JSON.stringify(value)
                                                )}
                                              </span>
                                            </div>
                                          ),
                                        )}
                                      </div>
                                    </div>
                                  ));
                                })()}
                              </div>

                              {/* Bottom Pagination */}
                              {(() => {
                                const totalPages = Math.ceil(
                                  filteredData.length / itemsPerPage,
                                );
                                if (totalPages <= 1) return null;

                                return (
                                  <div
                                    style={{
                                      marginTop: "30px",
                                      padding: "20px",
                                      
                                      borderRadius: "8px",
                                      display: "flex",
                                      justifyContent: "center",
                                      alignItems: "center",
                                      gap: "10px",
                                    }}
                                  >
                                    <button
                                      disabled={currentPage === 1}
                                      onClick={() => setCurrentPage(1)}
                                      style={{
                                        padding: "8px 12px",
                                        border: "1px solid var(--border-muted)",
                                        borderRadius: "6px",
                                        backgroundColor:
                                          currentPage === 1
                                            ? "#e9ecef"
                                            : "white",
                                        cursor:
                                          currentPage === 1
                                            ? "not-allowed"
                                            : "pointer",
                                        fontSize: "14px",
                                      }}
                                    >
                                      First
                                    </button>
                                    <button
                                      disabled={currentPage === 1}
                                      onClick={() =>
                                        setCurrentPage(currentPage - 1)
                                      }
                                      style={{
                                        padding: "8px 12px",
                                        border: "1px solid var(--border-muted)",
                                        borderRadius: "6px",
                                        backgroundColor:
                                          currentPage === 1
                                            ? "#e9ecef"
                                            : "white",
                                        cursor:
                                          currentPage === 1
                                            ? "not-allowed"
                                            : "pointer",
                                        fontSize: "14px",
                                      }}
                                    >
                                      Previous
                                    </button>

                                    {/* Page number buttons */}
                                    {(() => {
                                      const pageButtons = [];
                                      const startPage = Math.max(
                                        1,
                                        currentPage - 2,
                                      );
                                      const endPage = Math.min(
                                        totalPages,
                                        currentPage + 2,
                                      );

                                      for (
                                        let i = startPage;
                                        i <= endPage;
                                        i++
                                      ) {
                                        pageButtons.push(
                                          <button
                                            key={i}
                                            onClick={() => setCurrentPage(i)}
                                            style={{
                                              padding: "8px 12px",
                                              border: "1px solid var(--border-muted)",
                                              borderRadius: "6px",
                                              backgroundColor:
                                                currentPage === i
                                                  ? "#007bff"
                                                  : "white",
                                              color:
                                                currentPage === i
                                                  ? "white"
                                                  : "#333",
                                              cursor: "pointer",
                                              fontSize: "14px",
                                              fontWeight:
                                                currentPage === i
                                                  ? "bold"
                                                  : "normal",
                                            }}
                                          >
                                            {i}
                                          </button>,
                                        );
                                      }

                                      return pageButtons;
                                    })()}

                                    <button
                                      disabled={currentPage === totalPages}
                                      onClick={() =>
                                        setCurrentPage(currentPage + 1)
                                      }
                                      style={{
                                        padding: "8px 12px",
                                        border: "1px solid var(--border-muted)",
                                        borderRadius: "6px",
                                        backgroundColor:
                                          currentPage === totalPages
                                            ? "#e9ecef"
                                            : "white",
                                        cursor:
                                          currentPage === totalPages
                                            ? "not-allowed"
                                            : "pointer",
                                        fontSize: "14px",
                                      }}
                                    >
                                      Next
                                    </button>
                                    <button
                                      disabled={currentPage === totalPages}
                                      onClick={() => setCurrentPage(totalPages)}
                                      style={{
                                        padding: "8px 12px",
                                        border: "1px solid var(--border-muted)",
                                        borderRadius: "6px",
                                        backgroundColor:
                                          currentPage === totalPages
                                            ? "#e9ecef"
                                            : "white",
                                        cursor:
                                          currentPage === totalPages
                                            ? "not-allowed"
                                            : "pointer",
                                        fontSize: "14px",
                                      }}
                                    >
                                      Last
                                    </button>

                                    <div
                                      style={{
                                        marginLeft: "20px",
                                        fontSize: "14px",
                                        color: "var(--text-muted)",
                                      }}
                                    >
                                      Page {currentPage} of {totalPages}
                                    </div>
                                  </div>
                                );
                              })()}
                            </div>
                          </div>
                        );
                      })()}
                    </div>
                  ) : (
                    <div
                      style={{
                        padding: "40px",
                        textAlign: "center",
                        color: "var(--text-muted)",
                      }}
                    >
                      <div style={{ fontSize: "48px", marginBottom: "15px" }}>
                        📄
                      </div>
                      <div style={{ fontSize: "18px", marginBottom: "10px" }}>
                        No Results Available
                      </div>
                      <div style={{ fontSize: "14px" }}>
                        This job hasn't produced any data yet or the results are
                        empty.
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Analytics Tab */}
      {currentTab === "analytics" && (
        <div>
          <h2 className="cyber-subtitle">� Centralized Analytics & Data Intelligence</h2>

          {/* Data Sources Overview */}
          <div
            className="cyber-glass"
            style={{
              padding: "20px",
              borderRadius: "8px",
              marginBottom: "30px",
            }}
          >
            <h3 className="cyber-text" style={{ color: "var(--metal-gold)" }}>�️ Centralized Data Repository</h3>
            <div
              style={{
                display: "grid",
                gridTemplateColumns: "repeat(auto-fit, minmax(200px, 1fr))",
                gap: "15px",
                marginBottom: "20px",
              }}
            >
              <div
                className="cyber-glass"
                style={{
                  padding: "15px",
                  borderRadius: "8px",
                  border: "1px solid var(--border-primary)",
                  textAlign: "center",
                }}
              >
                <div
                  style={{
                    fontSize: "2em",
                    fontWeight: "bold",
                    color: "var(--metal-silver)",
                  }}
                >
                  {analytics?.total_data_points || 0}
                </div>
                <div className="cyber-text" style={{ fontSize: "14px", color: "var(--text-muted)" }}>
                  Total Records
                </div>
              </div>
              <div
                className="cyber-glass"
                style={{
                  padding: "15px",
                  borderRadius: "8px",
                  border: "1px solid var(--border-primary)",
                  textAlign: "center",
                }}
              >
                <div
                  style={{
                    fontSize: "2em",
                    fontWeight: "bold",
                    color: "var(--metal-gold)",
                  }}
                >
                  {analytics?.completed_jobs || 0}
                </div>
                <div className="cyber-text" style={{ fontSize: "14px", color: "var(--text-muted)" }}>
                  Data Sources
                </div>
              </div>
              <div
                className="cyber-glass"
                style={{
                  padding: "15px",
                  borderRadius: "8px",
                  border: "1px solid var(--border-primary)",
                  textAlign: "center",
                }}
              >
                <div
                  style={{
                    fontSize: "2em",
                    fontWeight: "bold",
                    color: "#17a2b8",
                  }}
                >
                  {analytics?.total_jobs && analytics?.total_jobs > 0
                    ? Math.round(
                        ((analytics?.completed_jobs || 0) /
                          analytics.total_jobs) *
                          100,
                      )
                    : 0}
                  %
                </div>
                <div style={{ fontSize: "14px", color: "var(--text-muted)" }}>
                  Success Rate
                </div>
              </div>
              <div
                style={{
                  padding: "15px",
                  
                  borderRadius: "8px",
                  border: "1px solid var(--border-primary)",
                  textAlign: "center",
                }}
              >
                <div
                  style={{
                    fontSize: "2em",
                    fontWeight: "bold",
                    color: "#fd7e14",
                  }}
                >
                  {analytics?.avg_completion_time || 0}s
                </div>
                <div style={{ fontSize: "14px", color: "var(--text-muted)" }}>
                  Avg Collection Time
                </div>
              </div>
            </div>

            {/* Centralization Actions */}
            <div style={{ display: "flex", gap: "15px", flexWrap: "wrap" }}>
              <button
                onClick={async () => {
                  try {
                    const response = await fetch(
                      "http://localhost:8000/api/data/analytics/refresh",
                      {
                        method: "POST",
                        headers: { Authorization: `Bearer ${token}` },
                      },
                    );
                    if (response.ok) {
                      fetchAnalytics();
                      alert(
                        "✅ Analytics refreshed from centralized database!",
                      );
                    }
                  } catch (error) {
                    alert("📊 Analytics refresh queued (offline mode)");
                  }
                }}
                style={{
                  padding: "10px 20px",
                  backgroundColor: "#007bff",
                  color: "white",
                  border: "none",
                  borderRadius: "6px",
                  cursor: "pointer",
                }}
              >
                🔄 Refresh Analytics
              </button>
              <button
                onClick={async () => {
                  try {
                    const response = await fetch(
                      "http://localhost:8000/api/data/consolidate",
                      {
                        method: "POST",
                        headers: { Authorization: `Bearer ${token}` },
                      },
                    );
                    if (response.ok) {
                      alert(
                        "✅ All job data consolidated into centralized database!",
                      );
                      fetchAnalytics();
                    }
                  } catch (error) {
                    alert("🗄️ Data consolidation queued (offline mode)");
                  }
                }}
                style={{
                  padding: "10px 20px",
                  backgroundColor: "#28a745",
                  color: "white",
                  border: "none",
                  borderRadius: "6px",
                  cursor: "pointer",
                }}
              >
                🗄️ Consolidate All Data
              </button>
              <button
                onClick={async () => {
                  try {
                    const response = await fetch(
                      "http://localhost:8000/api/data/export/all",
                      {
                        headers: { Authorization: `Bearer ${token}` },
                      },
                    );
                    if (response.ok) {
                      const blob = await response.blob();
                      const url = URL.createObjectURL(blob);
                      const a = document.createElement("a");
                      a.href = url;
                      a.download = `centralized_data_${new Date().toISOString().split("T")[0]}.json`;
                      a.click();
                      URL.revokeObjectURL(url);
                    }
                  } catch (error) {
                    alert("💾 Export queued (offline mode)");
                  }
                }}
                style={{
                  padding: "10px 20px",
                  backgroundColor: "#17a2b8",
                  color: "white",
                  border: "none",
                  borderRadius: "6px",
                  cursor: "pointer",
                }}
              >
                💾 Export All Data
              </button>
            </div>
          </div>

          {/* Analytics Dashboard */}
          {analytics ? (
            <div>
              <div
                style={{
                  display: "grid",
                  gridTemplateColumns: "repeat(auto-fit, minmax(350px, 1fr))",
                  gap: "20px",
                  marginBottom: "30px",
                }}
              >
                <div
                  style={{
                    padding: "20px",
                    
                    borderRadius: "8px",
                    border: "1px solid var(--border-muted)",
                  }}
                >
                  <h3>📊 Job Performance Analytics</h3>
                  <div style={{ display: "grid", gap: "10px" }}>
                    <div
                      style={{
                        display: "flex",
                        justifyContent: "space-between",
                      }}
                    >
                      <span>Total Jobs:</span>
                      <strong>{analytics.total_jobs}</strong>
                    </div>
                    <div
                      style={{
                        display: "flex",
                        justifyContent: "space-between",
                      }}
                    >
                      <span>Completed:</span>
                      <strong style={{ color: "var(--metal-gold)" }}>
                        {analytics.completed_jobs}
                      </strong>
                    </div>
                    <div
                      style={{
                        display: "flex",
                        justifyContent: "space-between",
                      }}
                    >
                      <span>Running:</span>
                      <strong style={{ color: "#ffc107" }}>
                        {analytics.running_jobs}
                      </strong>
                    </div>
                    <div
                      style={{
                        display: "flex",
                        justifyContent: "space-between",
                      }}
                    >
                      <span>Failed:</span>
                      <strong style={{ color: "#dc3545" }}>
                        {analytics.failed_jobs}
                      </strong>
                    </div>
                    <hr />
                    <div
                      style={{
                        display: "flex",
                        justifyContent: "space-between",
                      }}
                    >
                      <span>Success Rate:</span>
                      <strong
                        style={{
                          color:
                            analytics.total_jobs > 0 &&
                            analytics.completed_jobs / analytics.total_jobs >
                              0.8
                              ? "#28a745"
                              : "#ffc107",
                        }}
                      >
                        {analytics.total_jobs > 0
                          ? Math.round(
                              (analytics.completed_jobs /
                                analytics.total_jobs) *
                                100,
                            )
                          : 0}
                        %
                      </strong>
                    </div>
                  </div>
                </div>

                <div
                  style={{
                    padding: "20px",
                    backgroundColor: "#e8f5e8",
                    borderRadius: "8px",
                    border: "1px solid #c3e6cb",
                  }}
                >
                  <h3>🎯 Data Collection Insights</h3>
                  <div style={{ display: "grid", gap: "10px" }}>
                    <div
                      style={{
                        display: "flex",
                        justifyContent: "space-between",
                      }}
                    >
                      <span>Total Data Points:</span>
                      <strong>
                        {analytics.total_data_points?.toLocaleString() || '0'}
                      </strong>
                    </div>
                    <div
                      style={{
                        display: "flex",
                        justifyContent: "space-between",
                      }}
                    >
                      <span>Avg per Job:</span>
                      <strong>
                        {analytics.total_jobs > 0
                          ? Math.round(
                              (analytics.total_data_points || 0) /
                                analytics.total_jobs,
                            ).toLocaleString()
                          : 0}
                      </strong>
                    </div>
                    <div
                      style={{
                        display: "flex",
                        justifyContent: "space-between",
                      }}
                    >
                      <span>Avg Completion Time:</span>
                      <strong>{analytics.avg_completion_time}s</strong>
                    </div>
                    <hr />
                    <div
                      style={{
                        display: "flex",
                        justifyContent: "space-between",
                      }}
                    >
                      <span>Collection Rate:</span>
                      <strong>
                        {analytics.avg_completion_time > 0
                          ? Math.round(
                              (analytics.total_data_points || 0) /
                                analytics.avg_completion_time,
                            ).toLocaleString()
                          : 0}{" "}
                        pts/sec
                      </strong>
                    </div>
                  </div>
                </div>
              </div>

              {/* Recent Activity with Centralized Data */}
              <div
                className="cyber-glass"
                style={{
                  padding: "20px",
                  borderRadius: "8px",
                  marginBottom: "20px",
                }}
              >
                <h3 className="cyber-text" style={{ color: "var(--metal-gold)" }}>🔍 Data Source Analysis</h3>
                <div style={{ display: "grid", gap: "10px" }}>
                  {jobs.slice(0, 10).map((job) => (
                    <div
                      key={job.id}
                      className="cyber-glass"
                      style={{
                        padding: "15px",
                        borderRadius: "6px",
                        border: "1px solid var(--border-primary)",
                        display: "grid",
                        gridTemplateColumns: "2fr 1fr 1fr auto",
                        alignItems: "center",
                        gap: "15px",
                      }}
                    >
                      <div>
                        <div className="cyber-text" style={{ fontWeight: "bold", color: "var(--text-primary)" }}>{job.name}</div>
                        <div className="cyber-text" style={{ fontSize: "12px", color: "var(--text-muted)" }}>
                          Created:{" "}
                          {new Date(job.created_at).toLocaleDateString()}
                        </div>
                      </div>
                      <div style={{ textAlign: "center" }}>
                        <div className="cyber-text" style={{ fontWeight: "bold", color: "var(--metal-silver)" }}>
                          {job.results_count.toLocaleString()}
                        </div>
                        <div style={{ fontSize: "12px", color: "var(--text-muted)" }}>
                          Records
                        </div>
                      </div>
                      <div style={{ textAlign: "center" }}>
                        <span
                          style={{
                            padding: "4px 8px",
                            borderRadius: "12px",
                            fontSize: "12px",
                            fontWeight: "bold",
                            backgroundColor:
                              job.status === "completed"
                                ? "rgba(40, 167, 69, 0.2)"
                                : job.status === "failed"
                                  ? "rgba(220, 53, 69, 0.2)"
                                  : job.status === "running"
                                    ? "rgba(212, 175, 55, 0.2)"
                                    : "rgba(113, 121, 126, 0.2)",
                            color:
                              job.status === "completed"
                                ? "#155724"
                                : job.status === "failed"
                                  ? "#721c24"
                                  : job.status === "running"
                                    ? "#856404"
                                    : "#383d41",
                          }}
                        >
                          {job.status.toUpperCase()}
                        </span>
                      </div>
                      <button
                        onClick={() => getJobResults(job.id)}
                        style={{
                          padding: "6px 12px",
                          backgroundColor: "#6f42c1",
                          color: "white",
                          border: "none",
                          borderRadius: "4px",
                          cursor: "pointer",
                          fontSize: "12px",
                        }}
                      >
                        🔍 Analyze
                      </button>
                    </div>
                  ))}
                </div>
              </div>

              {/* Data Quality Metrics */}
              <div
                style={{
                  
                  padding: "20px",
                  borderRadius: "8px",
                }}
              >
                <h3>🎯 Data Quality & Insights</h3>
                <div
                  style={{
                    display: "grid",
                    gridTemplateColumns: "repeat(auto-fit, minmax(200px, 1fr))",
                    gap: "15px",
                  }}
                >
                  <div
                    style={{
                      padding: "15px",
                      
                      borderRadius: "8px",
                      border: "1px solid #dee2e6",
                      textAlign: "center",
                    }}
                  >
                    <div
                      style={{
                        fontSize: "1.5em",
                        fontWeight: "bold",
                        color: "var(--metal-gold)",
                      }}
                    >
                      {analytics.completed_jobs > 0 ? "✅" : "⏳"}
                    </div>
                    <div style={{ fontSize: "14px", marginTop: "5px" }}>
                      Data Completeness
                    </div>
                    <div style={{ fontSize: "12px", color: "var(--text-muted)" }}>
                      {analytics.completed_jobs} of {analytics.total_jobs} jobs
                    </div>
                  </div>
                  <div
                    style={{
                      padding: "15px",
                      
                      borderRadius: "8px",
                      border: "1px solid #dee2e6",
                      textAlign: "center",
                    }}
                  >
                    <div
                      style={{
                        fontSize: "1.5em",
                        fontWeight: "bold",
                        color: "#007bff",
                      }}
                    >
                      📊
                    </div>
                    <div style={{ fontSize: "14px", marginTop: "5px" }}>
                      Collection Velocity
                    </div>
                    <div style={{ fontSize: "12px", color: "var(--text-muted)" }}>
                      {analytics.avg_completion_time > 0 ? "Fast" : "Pending"}
                    </div>
                  </div>
                  <div
                    style={{
                      padding: "15px",
                      
                      borderRadius: "8px",
                      border: "1px solid #dee2e6",
                      textAlign: "center",
                    }}
                  >
                    <div
                      style={{
                        fontSize: "1.5em",
                        fontWeight: "bold",
                        color: "#17a2b8",
                      }}
                    >
                      🎯
                    </div>
                    <div style={{ fontSize: "14px", marginTop: "5px" }}>
                      Data Density
                    </div>
                    <div style={{ fontSize: "12px", color: "var(--text-muted)" }}>
                      {analytics.total_jobs > 0
                        ? Math.round(
                            (analytics.total_data_points || 0) / analytics.total_jobs,
                          )
                        : 0}{" "}
                      avg/job
                    </div>
                  </div>
                  <div
                    style={{
                      padding: "15px",
                      
                      borderRadius: "8px",
                      border: "1px solid #dee2e6",
                      textAlign: "center",
                    }}
                  >
                    <div
                      style={{
                        fontSize: "1.5em",
                        fontWeight: "bold",
                        color:
                          analytics.failed_jobs === 0 ? "#28a745" : "#dc3545",
                      }}
                    >
                      {analytics.failed_jobs === 0 ? "💎" : "⚠️"}
                    </div>
                    <div style={{ fontSize: "14px", marginTop: "5px" }}>
                      Data Reliability
                    </div>
                    <div style={{ fontSize: "12px", color: "var(--text-muted)" }}>
                      {analytics.failed_jobs} failures
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div
              style={{ textAlign: "center", padding: "40px", color: "var(--text-muted)" }}
            >
              <div style={{ fontSize: "48px", marginBottom: "15px" }}>📊</div>
              <div style={{ fontSize: "18px", marginBottom: "10px" }}>
                Loading Analytics Data
              </div>
              <div style={{ fontSize: "14px" }}>
                Gathering insights from centralized database...
              </div>
            </div>
          )}
        </div>
      )}

      {/* Performance Tab */}
      {currentTab === "performance" && (
        <div>
          <h2 className="cyber-subtitle">⚡ Performance Monitoring</h2>
          {performance ? (
            <div>
              <div
                style={{
                  display: "grid",
                  gridTemplateColumns: "repeat(auto-fit, minmax(250px, 1fr))",
                  gap: "20px",
                  marginBottom: "30px",
                }}
              >
                <div
                  className="cyber-glass"
                  style={{
                    padding: "20px",
                    borderRadius: "8px",
                    border: "1px solid var(--border-primary)",
                  }}
                >
                  <h3 className="cyber-text" style={{ color: "var(--metal-gold)" }}>System Resources</h3>
                  <div className="cyber-text" style={{ color: "var(--text-secondary)" }}>
                    CPU Usage: <strong style={{ color: "var(--metal-silver)" }}>{performance.cpu_usage}%</strong>
                  </div>
                  <div className="cyber-text" style={{ color: "var(--text-secondary)" }}>
                    Memory Usage: <strong style={{ color: "var(--metal-silver)" }}>{performance.memory_usage}%</strong>
                  </div>
                  <div className="cyber-text" style={{ color: "var(--text-secondary)" }}>
                    Active Connections:{" "}
                    <strong style={{ color: "var(--metal-silver)" }}>{performance.active_connections}</strong>
                  </div>
                </div>
                <div
                  style={{
                    padding: "20px",
                    backgroundColor: "#e8f5e8",
                    borderRadius: "8px",
                    border: "1px solid #c3e6cb",
                  }}
                >
                  <h3>API Performance</h3>
                  <div>
                    Requests/min:{" "}
                    <strong>{performance.requests_per_minute}</strong>
                  </div>
                  <div>
                    Avg Response Time:{" "}
                    <strong>{performance.avg_response_time}ms</strong>
                  </div>
                  <div>
                    Cache Hit Rate:{" "}
                    <strong>{performance.cache_hit_rate}%</strong>
                  </div>
                </div>
              </div>

              <div
                className="cyber-glass"
                style={{
                  padding: "20px",
                  borderRadius: "8px",
                  marginBottom: "20px",
                }}
              >
                <h3>Performance Actions</h3>
                <div style={{ display: "flex", gap: "10px" }}>
                  <button
                    onClick={() => fetchPerformance()}
                    style={{
                      padding: "8px 16px",
                      backgroundColor: "#17a2b8",
                      color: "white",
                      border: "none",
                      borderRadius: "4px",
                      cursor: "pointer",
                    }}
                  >
                    🔄 Refresh Metrics
                  </button>
                  <button
                    onClick={async () => {
                      try {
                        await fetch(
                          "http://localhost:8000/api/performance/cache/clear",
                          {
                            method: "POST",
                            headers: { Authorization: `Bearer ${token}` },
                          },
                        );
                        alert("Cache cleared successfully!");
                        fetchPerformance();
                      } catch (error) {
                        alert("Failed to clear cache");
                      }
                    }}
                    style={{
                      padding: "8px 16px",
                      backgroundColor: "#dc3545",
                      color: "white",
                      border: "none",
                      borderRadius: "4px",
                      cursor: "pointer",
                    }}
                  >
                    🗑️ Clear Cache
                  </button>
                </div>
              </div>
            </div>
          ) : (
            <div>Loading performance data...</div>
          )}
        </div>
      )}

      {/* Crawlers Tab */}
      {currentTab === "crawlers" && (
        <div>
          <h2>🕷️ Advanced Crawlers & Analysis</h2>

          {/* Crawler Type Selection */}
          <div
            className="cyber-glass"
            style={{
              padding: "20px",
              borderRadius: "8px",
              marginBottom: "30px",
            }}
          >
            <h3>🎯 Crawler Mode Selection</h3>
            <div
              style={{
                display: "grid",
                gridTemplateColumns: "repeat(auto-fit, minmax(300px, 1fr))",
                gap: "15px",
                marginBottom: "20px",
              }}
            >
              <div
                style={{
                  padding: "15px",
                  border:
                    newJob.type === "crawling"
                      ? "2px solid #007bff"
                      : "1px solid #ddd",
                  borderRadius: "8px",
                  backgroundColor:
                    newJob.type === "crawling" ? "rgba(0, 123, 255, 0.1)" : "rgba(64, 64, 64, 0.3)",
                  cursor: "pointer",
                }}
                onClick={() => setNewJob({ ...newJob, type: "crawling" })}
              >
                <h4 style={{ margin: "0 0 10px 0", color: "#007bff" }}>
                  🕷️ Deep Crawler
                </h4>
                <p style={{ margin: "0", fontSize: "14px" }}>
                  Automatically follows links and crawls through multiple pages
                  with configurable depth
                </p>
                <ul
                  style={{ fontSize: "12px", color: "var(--text-muted)", marginTop: "8px" }}
                >
                  <li>Link discovery & following</li>
                  <li>Configurable depth levels</li>
                  <li>Pattern-based filtering</li>
                  <li>Comprehensive site mapping</li>
                </ul>
              </div>
              <div
                style={{
                  padding: "15px",
                  border:
                    newJob.type === "scraping"
                      ? "2px solid #28a745"
                      : "1px solid #ddd",
                  borderRadius: "8px",
                  backgroundColor:
                    newJob.type === "scraping" ? "rgba(40, 167, 69, 0.1)" : "rgba(64, 64, 64, 0.3)",
                  cursor: "pointer",
                }}
                onClick={() => setNewJob({ ...newJob, type: "scraping" })}
              >
                <h4 style={{ margin: "0 0 10px 0", color: "var(--metal-gold)" }}>
                  📄 Single Page Scraper
                </h4>
                <p style={{ margin: "0", fontSize: "14px" }}>
                  Extracts data from specific pages without following links
                </p>
                <ul
                  style={{ fontSize: "12px", color: "var(--text-muted)", marginTop: "8px" }}
                >
                  <li>Targeted data extraction</li>
                  <li>Custom selectors</li>
                  <li>Fast processing</li>
                  <li>Precise control</li>
                </ul>
              </div>
            </div>
          </div>

          <div
            style={{
              display: "grid",
              gridTemplateColumns: "1fr 1fr",
              gap: "30px",
            }}
          >
            <div
              style={{
                
                padding: "20px",
                borderRadius: "8px",
              }}
            >
              <h3>
                🔍 {newJob.type === "crawling" ? "Crawler" : "Scraper"}{" "}
                Configuration
              </h3>
              <form
                onSubmit={submitJob}
                style={{
                  display: "flex",
                  flexDirection: "column",
                  gap: "15px",
                }}
              >
                <div>
                  <label
                    style={{
                      display: "block",
                      marginBottom: "5px",
                      fontWeight: "bold",
                    }}
                  >
                    Job Name:
                  </label>
                  <input
                    type="text"
                    value={newJob.name}
                    onChange={(e) =>
                      setNewJob({ ...newJob, name: e.target.value })
                    }
                    required
                    placeholder={
                      newJob.type === "crawling"
                        ? "Site Crawler Job"
                        : "Page Scraper Job"
                    }
                    style={{
                      width: "100%",
                      padding: "8px",
                      border: "1px solid #ccc",
                      borderRadius: "4px",
                    }}
                  />
                </div>
                <div>
                  <label
                    style={{
                      display: "block",
                      marginBottom: "5px",
                      fontWeight: "bold",
                    }}
                  >
                    {newJob.type === "crawling"
                      ? "Starting URL:"
                      : "Target URL:"}
                  </label>
                  <input
                    type="url"
                    value={newJob.url}
                    onChange={(e) =>
                      setNewJob({ ...newJob, url: e.target.value })
                    }
                    required
                    placeholder="https://example.com"
                    style={{
                      width: "100%",
                      padding: "8px",
                      border: "1px solid #ccc",
                      borderRadius: "4px",
                    }}
                  />
                </div>
                <div>
                  <label
                    style={{
                      display: "block",
                      marginBottom: "5px",
                      fontWeight: "bold",
                    }}
                  >
                    Content Type:
                  </label>
                  <select
                    value={newJob.scraper_type}
                    onChange={(e) =>
                      setNewJob({
                        ...newJob,
                        scraper_type: e.target.value as any,
                      })
                    }
                    style={{
                      width: "100%",
                      padding: "8px",
                      border: "1px solid #ccc",
                      borderRadius: "4px",
                    }}
                  >
                    <option value="basic">Basic Web Content</option>
                    <option value="e_commerce">E-Commerce Products</option>
                    <option value="news">News & Articles</option>
                    <option value="social_media">Social Media</option>
                    <option value="api">API Endpoints</option>
                  </select>
                </div>

                {newJob.type === "crawling" && (
                  <>
                    <div>
                      <label
                        style={{
                          display: "block",
                          marginBottom: "5px",
                          fontWeight: "bold",
                        }}
                      >
                        Crawl Depth: {newJob.config?.max_depth || 2}
                      </label>
                      <input
                        type="range"
                        min="1"
                        max="10"
                        value={newJob.config?.max_depth || 2}
                        onChange={(e) =>
                          setNewJob({
                            ...newJob,
                            config: {
                              ...newJob.config,
                              max_depth: parseInt(e.target.value),
                            },
                          })
                        }
                        style={{ width: "100%" }}
                      />
                      <div
                        style={{
                          display: "flex",
                          justifyContent: "space-between",
                          fontSize: "12px",
                          color: "var(--text-muted)",
                        }}
                      >
                        <span>1 (shallow)</span>
                        <span>5 (moderate)</span>
                        <span>10 (deep)</span>
                      </div>
                    </div>

                    <div>
                      <label
                        style={{
                          display: "block",
                          marginBottom: "5px",
                          fontWeight: "bold",
                        }}
                      >
                        Max Pages: {newJob.config?.max_pages || 50}
                      </label>
                      <input
                        type="range"
                        min="10"
                        max="1000"
                        step="10"
                        value={newJob.config?.max_pages || 50}
                        onChange={(e) =>
                          setNewJob({
                            ...newJob,
                            config: {
                              ...newJob.config,
                              max_pages: parseInt(e.target.value),
                            },
                          })
                        }
                        style={{ width: "100%" }}
                      />
                      <div
                        style={{
                          display: "flex",
                          justifyContent: "space-between",
                          fontSize: "12px",
                          color: "var(--text-muted)",
                        }}
                      >
                        <span>10</span>
                        <span>500</span>
                        <span>1000</span>
                      </div>
                    </div>

                    <div>
                      <label
                        style={{
                          display: "block",
                          marginBottom: "5px",
                          fontWeight: "bold",
                        }}
                      >
                        Delay Between Requests: {newJob.config?.delay || 1000}ms
                      </label>
                      <input
                        type="range"
                        min="100"
                        max="5000"
                        step="100"
                        value={newJob.config?.delay || 1000}
                        onChange={(e) =>
                          setNewJob({
                            ...newJob,
                            config: {
                              ...newJob.config,
                              delay: parseInt(e.target.value),
                            },
                          })
                        }
                        style={{ width: "100%" }}
                      />
                      <div
                        style={{
                          display: "flex",
                          justifyContent: "space-between",
                          fontSize: "12px",
                          color: "var(--text-muted)",
                        }}
                      >
                        <span>100ms (fast)</span>
                        <span>2500ms (moderate)</span>
                        <span>5000ms (polite)</span>
                      </div>
                    </div>

                    <div>
                      <label
                        style={{
                          display: "block",
                          marginBottom: "5px",
                          fontWeight: "bold",
                        }}
                      >
                        Link Patterns (include):
                      </label>
                      <input
                        type="text"
                        value={newJob.config?.link_patterns?.join(", ") || ""}
                        onChange={(e) =>
                          setNewJob({
                            ...newJob,
                            config: {
                              ...newJob.config,
                              link_patterns: e.target.value
                                .split(",")
                                .map((p) => p.trim())
                                .filter((p) => p),
                            },
                          })
                        }
                        placeholder="/products/, /articles/, /news/"
                        style={{
                          width: "100%",
                          padding: "8px",
                          border: "1px solid #ccc",
                          borderRadius: "4px",
                        }}
                      />
                      <small style={{ color: "var(--text-muted)" }}>
                        Comma-separated patterns for links to follow
                      </small>
                    </div>

                    <div>
                      <label
                        style={{
                          display: "block",
                          marginBottom: "5px",
                          fontWeight: "bold",
                        }}
                      >
                        Ignore Patterns (exclude):
                      </label>
                      <input
                        type="text"
                        value={newJob.config?.ignore_patterns?.join(", ") || ""}
                        onChange={(e) =>
                          setNewJob({
                            ...newJob,
                            config: {
                              ...newJob.config,
                              ignore_patterns: e.target.value
                                .split(",")
                                .map((p) => p.trim())
                                .filter((p) => p),
                            },
                          })
                        }
                        placeholder="/admin/, /login/, .pdf, .jpg"
                        style={{
                          width: "100%",
                          padding: "8px",
                          border: "1px solid #ccc",
                          borderRadius: "4px",
                        }}
                      />
                      <small style={{ color: "var(--text-muted)" }}>
                        Comma-separated patterns for links to ignore
                      </small>
                    </div>
                  </>
                )}

                <div>
                  <label
                    style={{
                      display: "block",
                      marginBottom: "5px",
                      fontWeight: "bold",
                    }}
                  >
                    Custom Selectors (JSON):
                  </label>
                  <textarea
                    value={JSON.stringify(newJob.custom_selectors, null, 2)}
                    onChange={(e) => {
                      try {
                        setNewJob({
                          ...newJob,
                          custom_selectors: JSON.parse(e.target.value),
                        });
                      } catch (error) {
                        // Invalid JSON, ignore for now
                      }
                    }}
                    placeholder='{"title": "h1", "content": ".content", "links": "a"}'
                    style={{
                      width: "100%",
                      padding: "8px",
                      border: "1px solid #ccc",
                      borderRadius: "4px",
                      minHeight: "100px",
                      fontFamily: "monospace",
                    }}
                  />
                </div>

                <button
                  type="submit"
                  disabled={!isBackendConnected || isSubmitting}
                  style={{
                    padding: "12px",
                    backgroundColor: isBackendConnected
                      ? newJob.type === "crawling"
                        ? "#007bff"
                        : "#28a745"
                      : "#6c757d",
                    color: "white",
                    border: "none",
                    borderRadius: "4px",
                    cursor: isBackendConnected ? "pointer" : "not-allowed",
                    fontSize: "16px",
                  }}
                >
                  {isSubmitting
                    ? newJob.type === "crawling"
                      ? "Starting Crawler..."
                      : "Creating Scraper..."
                    : newJob.type === "crawling"
                      ? "🕷️ Start Crawler"
                      : "📄 Create Scraper"}
                </button>
              </form>
            </div>

            <div>
              <div
                style={{
                  
                  padding: "20px",
                  borderRadius: "8px",
                  marginBottom: "20px",
                }}
              >
                <h3>
                  📊 {newJob.type === "crawling" ? "Crawler" : "Scraper"}{" "}
                  Features
                </h3>
                <ul style={{ margin: "10px 0", paddingLeft: "20px" }}>
                  {newJob.type === "crawling" ? (
                    <>
                      <li>🔍 Automatic link discovery & following</li>
                      <li>📏 Configurable crawl depth (1-10 levels)</li>
                      <li>🎯 Pattern-based link filtering</li>
                      <li>🚦 Smart rate limiting & delays</li>
                      <li>🗺️ Site structure mapping</li>
                      <li>📈 Real-time progress tracking</li>
                      <li>💾 Comprehensive data collection</li>
                      <li>🔐 Respect for robots.txt</li>
                    </>
                  ) : (
                    <>
                      <li>🔍 Targeted content extraction</li>
                      <li>🎯 Custom CSS selectors</li>
                      <li>📊 Data validation & cleaning</li>
                      <li>⚡ Fast processing</li>
                      <li>📈 Quality analytics</li>
                      <li>🔄 Real-time monitoring</li>
                      <li>💾 Multiple export formats</li>
                      <li>🔐 Security & rate limiting</li>
                    </>
                  )}
                </ul>
              </div>

              <div
                style={{
                  
                  padding: "20px",
                  borderRadius: "8px",
                }}
              >
                <h3>🎯 Quick Templates</h3>
                <div
                  style={{
                    display: "flex",
                    flexDirection: "column",
                    gap: "10px",
                  }}
                >
                  <button
                    onClick={() =>
                      setNewJob({
                        name: "E-commerce Site Crawler",
                        type: "crawling",
                        url: "https://example-shop.com",
                        scraper_type: "e_commerce",
                        custom_selectors: {
                          title: ".product-title",
                          price: ".price",
                          description: ".product-desc",
                        },
                        config: {
                          max_depth: 3,
                          max_pages: 200,
                          follow_links: true,
                          delay: 2000,
                          link_patterns: ["/products/", "/category/"],
                          ignore_patterns: ["/admin/", "/cart/", "/checkout/"],
                        },
                      })
                    }
                    style={{
                      padding: "10px",
                      backgroundColor: "#17a2b8",
                      color: "white",
                      border: "none",
                      borderRadius: "4px",
                      cursor: "pointer",
                    }}
                  >
                    🛒 E-commerce Crawler
                  </button>
                  <button
                    onClick={() =>
                      setNewJob({
                        name: "News Site Deep Crawler",
                        type: "crawling",
                        url: "https://news-site.com",
                        scraper_type: "news",
                        custom_selectors: {
                          headline: "h1",
                          content: ".article-body",
                          author: ".author",
                          date: ".publish-date",
                        },
                        config: {
                          max_depth: 4,
                          max_pages: 500,
                          follow_links: true,
                          delay: 1500,
                          link_patterns: ["/articles/", "/news/", "/story/"],
                          ignore_patterns: ["/sports/", "/weather/", "/ads/"],
                        },
                      })
                    }
                    style={{
                      padding: "10px",
                      backgroundColor: "#fd7e14",
                      color: "white",
                      border: "none",
                      borderRadius: "4px",
                      cursor: "pointer",
                    }}
                  >
                    📰 News Crawler
                  </button>
                  <button
                    onClick={() =>
                      setNewJob({
                        name: "General Website Crawler",
                        type: "crawling",
                        url: "https://example.com",
                        scraper_type: "basic",
                        custom_selectors: {
                          title: "h1",
                          content: "p",
                          links: "a",
                        },
                        config: {
                          max_depth: 2,
                          max_pages: 100,
                          follow_links: true,
                          delay: 1000,
                          link_patterns: [],
                          ignore_patterns: [
                            ".pdf",
                            ".jpg",
                            ".png",
                            "/login/",
                            "/admin/",
                          ],
                        },
                      })
                    }
                    style={{
                      padding: "10px",
                      backgroundColor: "#6f42c1",
                      color: "white",
                      border: "none",
                      borderRadius: "4px",
                      cursor: "pointer",
                    }}
                  >
                    🔧 Basic Crawler
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Network Configuration Tab */}
      {currentTab === "network" && (
        <div>
          <h2 className="cyber-subtitle">🔗 Network Configuration</h2>

          {/* TOR Integration */}
          <div
            className="cyber-glass"
            style={{
              padding: "20px",
              borderRadius: "8px",
              marginBottom: "30px",
            }}
          >
            <h3 className="cyber-text" style={{ color: "var(--metal-gold)" }}>🧅 TOR Network Integration</h3>
            <div
              style={{
                display: "grid",
                gridTemplateColumns: "1fr 1fr",
                gap: "20px",
              }}
            >
              <div>
                <h4 className="cyber-text" style={{ color: "var(--metal-silver)" }}>Connection Status</h4>
                <div
                  className="status-indicator status-disconnected"
                  style={{
                    display: "flex",
                    alignItems: "center",
                    gap: "10px",
                    marginBottom: "15px",
                  }}
                >
                  <span>Disconnected</span>
                </div>
                <button
                  className="cyber-button cyber-button-gold"
                  style={{
                    padding: "10px 20px",
                    marginRight: "10px",
                  }}
                >
                  🔌 Connect to TOR
                </button>
                <button
                  className="cyber-button"
                  style={{
                    padding: "10px 20px",
                  }}
                >
                  🔄 New Circuit
                </button>
              </div>
              <div>
                <h4 className="cyber-text" style={{ color: "var(--metal-silver)" }}>Exit Node Selection</h4>
                <select
                  className="cyber-input"
                  style={{
                    width: "100%",
                    padding: "8px",
                    borderRadius: "4px",
                    marginBottom: "10px",
                  }}
                >
                  <option>🇺🇸 United States</option>
                  <option>🇩🇪 Germany</option>
                  <option>🇳🇱 Netherlands</option>
                  <option>🇨🇭 Switzerland</option>
                  <option>🇸🇪 Sweden</option>
                </select>
                <div style={{ fontSize: "12px", color: "var(--text-muted)" }}>
                  Current Circuit: Connecting...
                </div>
              </div>
            </div>
          </div>

          {/* VPN Integration */}
          <div
            style={{
              backgroundColor: "rgba(40, 167, 69, 0.1)",
              padding: "20px",
              borderRadius: "8px",
              marginBottom: "30px",
              border: "1px solid var(--steel-color)"
            }}
          >
            <h3>🔒 VPN Provider Integration</h3>
            <div
              style={{
                display: "grid",
                gridTemplateColumns: "repeat(auto-fit, minmax(250px, 1fr))",
                gap: "15px",
              }}
            >
              {[
                "CyberGhost",
                "IPVanish",
                "ProtonVPN",
                "Mullvad",
                "PIA",
                "TunnelBear",
                "SurfShark",
              ].map((provider) => (
                <div
                  key={provider}
                  style={{
                    padding: "15px",
                    border: "1px solid #c3e6cb",
                    borderRadius: "8px",
                    
                  }}
                >
                  <h4 style={{ margin: "0 0 10px 0" }}>{provider}</h4>
                  <div
                    style={{
                      fontSize: "12px",
                      color: "var(--text-muted)",
                      marginBottom: "10px",
                    }}
                  >
                    Status: Not Configured
                  </div>
                  <button
                    style={{
                      padding: "6px 12px",
                      backgroundColor: "#007bff",
                      color: "white",
                      border: "none",
                      borderRadius: "4px",
                      cursor: "pointer",
                      fontSize: "12px",
                    }}
                  >
                    Configure
                  </button>
                </div>
              ))}
            </div>
          </div>

          {/* Proxy Pool Management */}
          <div
            style={{
              
              padding: "20px",
              borderRadius: "8px",
            }}
          >
            <h3>🎭 Proxy Pool Management</h3>
            <div
              style={{
                display: "grid",
                gridTemplateColumns: "1fr 1fr 1fr",
                gap: "20px",
              }}
            >
              <div
                style={{
                  padding: "15px",
                  border: "1px solid #ffeaa7",
                  borderRadius: "8px",
                  
                }}
              >
                <h4>Residential Proxies</h4>
                <div>Active: 0 / 0</div>
                <div>Success Rate: N/A</div>
                <div>Avg Speed: N/A</div>
                <button
                  style={{
                    padding: "8px 16px",
                    backgroundColor: "#28a745",
                    color: "white",
                    border: "none",
                    borderRadius: "4px",
                    cursor: "pointer",
                    marginTop: "10px",
                  }}
                >
                  Add Pool
                </button>
              </div>
              <div
                style={{
                  padding: "15px",
                  border: "1px solid #ffeaa7",
                  borderRadius: "8px",
                  
                }}
              >
                <h4>Datacenter Proxies</h4>
                <div>Active: 0 / 0</div>
                <div>Success Rate: N/A</div>
                <div>Avg Speed: N/A</div>
                <button
                  style={{
                    padding: "8px 16px",
                    backgroundColor: "#28a745",
                    color: "white",
                    border: "none",
                    borderRadius: "4px",
                    cursor: "pointer",
                    marginTop: "10px",
                  }}
                >
                  Add Pool
                </button>
              </div>
              <div
                style={{
                  padding: "15px",
                  border: "1px solid #ffeaa7",
                  borderRadius: "8px",
                  
                }}
              >
                <h4>Mobile Proxies</h4>
                <div>Active: 0 / 0</div>
                <div>Success Rate: N/A</div>
                <div>Avg Speed: N/A</div>
                <button
                  style={{
                    padding: "8px 16px",
                    backgroundColor: "#28a745",
                    color: "white",
                    border: "none",
                    borderRadius: "4px",
                    cursor: "pointer",
                    marginTop: "10px",
                  }}
                >
                  Add Pool
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* OSINT Integration Tab */}
      {currentTab === "osint" && (
        <div>
          <h2 className="cyber-subtitle">🎯 OSINT Intelligence Gathering</h2>

          {/* Investigation Targets */}
          <div
            className="cyber-glass"
            style={{
              padding: "20px",
              borderRadius: "8px",
              marginBottom: "30px",
            }}
          >
            <h3 className="cyber-text" style={{ color: "var(--metal-gold)" }}>🎯 Investigation Targets</h3>
            <div
              style={{
                display: "grid",
                gridTemplateColumns: "1fr auto",
                gap: "15px",
                marginBottom: "20px",
              }}
            >
              <input
                type="text"
                placeholder="Enter domain, email, username, or IP address"
                className="cyber-input"
                style={{
                  width: "100%",
                  padding: "12px",
                  fontSize: "14px",
                }}
              />
              <button
                className="cyber-button cyber-button-gold"
                style={{
                  padding: "12px 20px",
                  backgroundColor: "#007bff",
                  color: "white",
                  border: "none",
                  borderRadius: "6px",
                  cursor: "pointer",
                }}
              >
                🔍 Add Target
              </button>
            </div>

            <div style={{ display: "grid", gap: "10px" }}>
              <div
                style={{
                  padding: "15px",
                  border: "1px solid var(--border-primary)",
                  borderRadius: "8px",
                  
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                }}
              >
                <div>
                  <strong>example.com</strong>
                  <div style={{ fontSize: "12px", color: "var(--text-muted)" }}>
                    Domain • Added 2 minutes ago
                  </div>
                </div>
                <div style={{ display: "flex", gap: "10px" }}>
                  <span
                    style={{
                      padding: "4px 8px",
                      
                      borderRadius: "12px",
                      fontSize: "12px",
                    }}
                  >
                    Queued
                  </span>
                  <button
                    style={{
                      padding: "4px 8px",
                      backgroundColor: "#28a745",
                      color: "white",
                      border: "none",
                      borderRadius: "4px",
                      cursor: "pointer",
                      fontSize: "12px",
                    }}
                  >
                    Start
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* SpiderFoot Integration */}
          <div
            style={{
              
              padding: "20px",
              borderRadius: "8px",
              marginBottom: "30px",
            }}
          >
            <h3>🕷️ SpiderFoot Intelligence Modules</h3>
            <div
              style={{
                display: "grid",
                gridTemplateColumns: "repeat(auto-fit, minmax(200px, 1fr))",
                gap: "15px",
              }}
            >
              {[
                "DNS Records",
                "WHOIS Data",
                "Subdomain Discovery",
                "Email Discovery",
                "Social Media Profiles",
                "Data Breach Check",
                "Shodan Integration",
                "Certificate Transparency",
              ].map((module) => (
                <div
                  key={module}
                  style={{
                    padding: "12px",
                    border: "1px solid #dee2e6",
                    borderRadius: "6px",
                    
                    textAlign: "center",
                  }}
                >
                  <div style={{ fontWeight: "bold", marginBottom: "5px" }}>
                    {module}
                  </div>
                  <label
                    style={{
                      display: "flex",
                      alignItems: "center",
                      justifyContent: "center",
                      gap: "5px",
                    }}
                  >
                    <input type="checkbox" defaultChecked />
                    <span style={{ fontSize: "12px" }}>Enabled</span>
                  </label>
                </div>
              ))}
            </div>
          </div>

          {/* Investigation Results */}
          <div
            className="cyber-glass"
            style={{
              padding: "20px",
              borderRadius: "8px",
            }}
          >
            <h3 className="cyber-text" style={{ color: "var(--metal-gold)" }}>📊 Investigation Results</h3>
            <div
              style={{ textAlign: "center", padding: "40px", color: "var(--text-muted)" }}
            >
              <div style={{ fontSize: "48px", marginBottom: "15px" }}>🕵️</div>
              <div className="cyber-text" style={{ fontSize: "18px", marginBottom: "10px", color: "var(--text-secondary)" }}>
                No Active Investigations
              </div>
              <div className="cyber-text" style={{ fontSize: "14px", color: "var(--text-muted)" }}>
                Add targets above to start intelligence gathering
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Data Enrichment Tab */}
      {currentTab === "data-enrichment" && (
        <div>
          <h2 className="cyber-subtitle">� Data Enrichment Services</h2>

          {/* API Providers */}
          <div
            className="cyber-glass"
            style={{
              padding: "20px",
              borderRadius: "8px",
              marginBottom: "30px",
            }}
          >
            <h3>🔌 Commercial API Providers</h3>
            <div
              style={{
                display: "grid",
                gridTemplateColumns: "repeat(auto-fit, minmax(300px, 1fr))",
                gap: "20px",
              }}
            >
              {[
                {
                  name: "Clearbit",
                  status: "Not Configured",
                  requests: 0,
                  cost: "$0.00",
                },
                {
                  name: "FullContact",
                  status: "Not Configured",
                  requests: 0,
                  cost: "$0.00",
                },
                {
                  name: "Hunter.io",
                  status: "Not Configured",
                  requests: 0,
                  cost: "$0.00",
                },
                {
                  name: "Shodan",
                  status: "Not Configured",
                  requests: 0,
                  cost: "$0.00",
                },
              ].map((provider) => (
                <div
                  key={provider.name}
                  style={{
                    padding: "20px",
                    border: "1px solid #ffeaa7",
                    borderRadius: "8px",
                    
                  }}
                >
                  <h4 style={{ margin: "0 0 15px 0" }}>{provider.name}</h4>
                  <div style={{ marginBottom: "10px" }}>
                    <div>
                      Status:{" "}
                      <span style={{ color: "#dc3545" }}>
                        {provider.status}
                      </span>
                    </div>
                    <div>Requests: {provider.requests}</div>
                    <div>Cost: {provider.cost}</div>
                  </div>
                  <button
                    style={{
                      padding: "8px 16px",
                      backgroundColor: "#007bff",
                      color: "white",
                      border: "none",
                      borderRadius: "4px",
                      cursor: "pointer",
                      marginRight: "10px",
                    }}
                  >
                    Configure API
                  </button>
                  <button
                    style={{
                      padding: "8px 16px",
                      backgroundColor: "#28a745",
                      color: "white",
                      border: "none",
                      borderRadius: "4px",
                      cursor: "pointer",
                    }}
                  >
                    Test
                  </button>
                </div>
              ))}
            </div>
          </div>

          {/* Enrichment Queue */}
          <div
            style={{
              
              padding: "20px",
              borderRadius: "8px",
              marginBottom: "30px",
            }}
          >
            <h3>📋 Enrichment Queue</h3>
            <div
              style={{
                display: "grid",
                gridTemplateColumns: "2fr 1fr auto",
                gap: "15px",
                marginBottom: "20px",
              }}
            >
              <input
                type="text"
                placeholder="Enter email, domain, or company name for enrichment"
                style={{
                  width: "100%",
                  padding: "12px",
                  border: "1px solid var(--border-muted)",
                  borderRadius: "6px",
                }}
              />
              <select
                style={{
                  padding: "12px",
                  border: "1px solid var(--border-muted)",
                  borderRadius: "6px",
                }}
              >
                <option>All Providers</option>
                <option>Clearbit Only</option>
                <option>FullContact Only</option>
                <option>Hunter.io Only</option>
                <option>Shodan Only</option>
              </select>
              <button
                style={{
                  padding: "12px 20px",
                  backgroundColor: "#007bff",
                  color: "white",
                  border: "none",
                  borderRadius: "6px",
                  cursor: "pointer",
                }}
              >
                🚀 Enrich
              </button>
            </div>

            <div
              style={{ textAlign: "center", padding: "40px", color: "var(--text-muted)" }}
            >
              <div style={{ fontSize: "48px", marginBottom: "15px" }}>💎</div>
              <div style={{ fontSize: "18px", marginBottom: "10px" }}>
                No Enrichment Requests
              </div>
              <div style={{ fontSize: "14px" }}>
                Add data above to start enrichment process
              </div>
            </div>
          </div>

          {/* Cost Analytics */}
          <div
            style={{
              
              padding: "20px",
              borderRadius: "8px",
            }}
          >
            <h3>💰 Cost Analytics & Usage</h3>
            <div
              style={{
                display: "grid",
                gridTemplateColumns: "repeat(auto-fit, minmax(200px, 1fr))",
                gap: "20px",
              }}
            >
              <div
                style={{
                  padding: "15px",
                  border: "1px solid #dee2e6",
                  borderRadius: "8px",
                  
                  textAlign: "center",
                }}
              >
                <h4>Total Spend</h4>
                <div
                  style={{
                    fontSize: "2em",
                    fontWeight: "bold",
                    color: "#007bff",
                  }}
                >
                  $0.00
                </div>
              </div>
              <div
                style={{
                  padding: "15px",
                  border: "1px solid #dee2e6",
                  borderRadius: "8px",
                  
                  textAlign: "center",
                }}
              >
                <h4>This Month</h4>
                <div
                  style={{
                    fontSize: "2em",
                    fontWeight: "bold",
                    color: "var(--metal-gold)",
                  }}
                >
                  $0.00
                </div>
              </div>
              <div
                style={{
                  padding: "15px",
                  border: "1px solid #dee2e6",
                  borderRadius: "8px",
                  
                  textAlign: "center",
                }}
              >
                <h4>Requests</h4>
                <div
                  style={{
                    fontSize: "2em",
                    fontWeight: "bold",
                    color: "#17a2b8",
                  }}
                >
                  0
                </div>
              </div>
              <div
                style={{
                  padding: "15px",
                  border: "1px solid #dee2e6",
                  borderRadius: "8px",
                  
                  textAlign: "center",
                }}
              >
                <h4>Success Rate</h4>
                <div
                  style={{
                    fontSize: "2em",
                    fontWeight: "bold",
                    color: "#fd7e14",
                  }}
                >
                  N/A
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Data Parsing Tab */}
      {currentTab === "data-parsing" && (
        <div>
          <h2 className="cyber-subtitle">� Advanced Data Parsing</h2>

          {/* File Upload */}
          <div
            className="cyber-glass"
            style={{
              padding: "20px",
              borderRadius: "8px",
              marginBottom: "30px",
            }}
          >
            <h3 className="cyber-text" style={{ color: "var(--metal-gold)" }}>📁 File Upload & Processing</h3>
            <div
              className="cyber-glass"
              style={{
                border: "2px dashed var(--border-primary)",
                padding: "40px",
                textAlign: "center",
                borderRadius: "8px",
              }}
            >
              <div style={{ fontSize: "48px", marginBottom: "15px" }}>📄</div>
              <div className="cyber-text" style={{ fontSize: "18px", marginBottom: "10px", color: "var(--text-primary)" }}>
                Drop files here or click to upload
              </div>
              <div
                className="cyber-text"
                style={{
                  fontSize: "14px",
                  color: "var(--text-muted)",
                  marginBottom: "20px",
                }}
              >
                Supported: PDF, TXT, DOCX, CSV, JSON, XML, Images (OCR)
              </div>
              <button
                style={{
                  padding: "12px 24px",
                  backgroundColor: "#007bff",
                  color: "white",
                  border: "none",
                  borderRadius: "6px",
                  cursor: "pointer",
                }}
              >
                📁 Choose Files
              </button>
            </div>
          </div>

          {/* ML Models */}
          <div
            style={{
              backgroundColor: "rgba(40, 167, 69, 0.1)",
              padding: "20px",
              borderRadius: "8px",
              marginBottom: "30px",
              border: "1px solid var(--steel-color)"
            }}
          >
            <h3>🧠 ML-Powered Analysis</h3>
            <div
              style={{
                display: "grid",
                gridTemplateColumns: "repeat(auto-fit, minmax(250px, 1fr))",
                gap: "15px",
              }}
            >
              {[
                {
                  name: "Entity Extraction",
                  model: "spaCy en_core_web_sm",
                  status: "Ready",
                },
                {
                  name: "Sentiment Analysis",
                  model: "VADER + TextBlob",
                  status: "Ready",
                },
                {
                  name: "Language Detection",
                  model: "langdetect",
                  status: "Ready",
                },
                {
                  name: "Topic Modeling",
                  model: "LDA + BERT",
                  status: "Loading...",
                },
                {
                  name: "OCR Processing",
                  model: "Tesseract + EasyOCR",
                  status: "Ready",
                },
                {
                  name: "Document Classification",
                  model: "DistilBERT",
                  status: "Loading...",
                },
              ].map((ml) => (
                <div
                  key={ml.name}
                  style={{
                    padding: "15px",
                    border: "1px solid #c3e6cb",
                    borderRadius: "8px",
                    
                  }}
                >
                  <h4 style={{ margin: "0 0 10px 0" }}>{ml.name}</h4>
                  <div
                    style={{
                      fontSize: "12px",
                      color: "var(--text-muted)",
                      marginBottom: "5px",
                    }}
                  >
                    {ml.model}
                  </div>
                  <span
                    style={{
                      padding: "4px 8px",
                      borderRadius: "12px",
                      fontSize: "12px",
                      backgroundColor:
                        ml.status === "Ready" ? "rgba(40, 167, 69, 0.2)" : "rgba(212, 175, 55, 0.2)",
                      color: ml.status === "Ready" ? "#155724" : "#856404",
                    }}
                  >
                    {ml.status}
                  </span>
                </div>
              ))}
            </div>
          </div>

          {/* Processing Results */}
          <div
            style={{
              
              padding: "20px",
              borderRadius: "8px",
            }}
          >
            <h3>📊 Processing Results</h3>
            <div
              style={{ textAlign: "center", padding: "40px", color: "var(--text-muted)" }}
            >
              <div style={{ fontSize: "48px", marginBottom: "15px" }}>🤖</div>
              <div style={{ fontSize: "18px", marginBottom: "10px" }}>
                No Files Processed
              </div>
              <div style={{ fontSize: "14px" }}>
                Upload files above to start ML-powered analysis
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Embedded Browser Tab */}
      {currentTab === "browser" && (
        <div>
          <h2>🌍 Embedded Browser</h2>

          {/* Browser Controls */}
          <div
            style={{
              
              padding: "15px",
              borderRadius: "8px",
              marginBottom: "20px",
            }}
          >
            <div style={{ display: "flex", alignItems: "center", gap: "10px" }}>
              <button
                style={{
                  padding: "8px 12px",
                  backgroundColor: "#6c757d",
                  color: "white",
                  border: "none",
                  borderRadius: "4px",
                  cursor: "pointer",
                }}
              >
                ← Back
              </button>
              <button
                style={{
                  padding: "8px 12px",
                  backgroundColor: "#6c757d",
                  color: "white",
                  border: "none",
                  borderRadius: "4px",
                  cursor: "pointer",
                }}
              >
                → Forward
              </button>
              <button
                style={{
                  padding: "8px 12px",
                  backgroundColor: "#17a2b8",
                  color: "white",
                  border: "none",
                  borderRadius: "4px",
                  cursor: "pointer",
                }}
              >
                🔄 Reload
              </button>
              <input
                type="url"
                placeholder="Enter URL..."
                defaultValue="https://example.com"
                style={{
                  flex: 1,
                  padding: "8px 12px",
                  border: "1px solid var(--border-muted)",
                  borderRadius: "4px",
                }}
              />
              <button
                style={{
                  padding: "8px 12px",
                  backgroundColor: "#28a745",
                  color: "white",
                  border: "none",
                  borderRadius: "4px",
                  cursor: "pointer",
                }}
              >
                Go
              </button>
              <button
                style={{
                  padding: "8px 12px",
                  backgroundColor: "#dc3545",
                  color: "white",
                  border: "none",
                  borderRadius: "4px",
                  cursor: "pointer",
                }}
              >
                🔴 Record
              </button>
            </div>
          </div>

          {/* Browser Window */}
          <div
            style={{
              border: "1px solid var(--border-muted)",
              borderRadius: "8px",
              height: "600px",
              
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              fontSize: "18px",
              color: "var(--text-muted)",
            }}
          >
            🌍 Embedded Chromium Browser
            <br />
            <small>
              Browser integration would be implemented with PyQt6 WebEngine
            </small>
          </div>

          {/* Recording Panel */}
          <div
            style={{
              
              padding: "20px",
              borderRadius: "8px",
              marginTop: "20px",
            }}
          >
            <h3>📹 Interaction Recording</h3>
            <div
              style={{
                display: "grid",
                gridTemplateColumns: "1fr auto auto",
                gap: "15px",
                alignItems: "center",
              }}
            >
              <div>
                <div style={{ fontWeight: "bold" }}>
                  Recording Status: Not Recording
                </div>
                <div style={{ fontSize: "14px", color: "var(--text-muted)" }}>
                  Click Record to start capturing interactions
                </div>
              </div>
              <button
                style={{
                  padding: "10px 20px",
                  backgroundColor: "#007bff",
                  color: "white",
                  border: "none",
                  borderRadius: "4px",
                  cursor: "pointer",
                }}
              >
                💾 Save Recording
              </button>
              <button
                style={{
                  padding: "10px 20px",
                  backgroundColor: "#28a745",
                  color: "white",
                  border: "none",
                  borderRadius: "4px",
                  cursor: "pointer",
                }}
              >
                ▶️ Replay
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Data Visualization Tab */}
      {currentTab === "visualization" && (
        <div>
          <h2>📈 Data Visualization & Site Mapping</h2>

          {/* Visualization Controls */}
          <div
            style={{
              backgroundColor: "#f8f9fa",
              padding: "20px",
              borderRadius: "8px",
              marginBottom: "30px",
            }}
          >
            <h3>🎛️ Visualization Controls</h3>
            <div
              style={{
                display: "grid",
                gridTemplateColumns: "repeat(auto-fit, minmax(200px, 1fr))",
                gap: "15px",
              }}
            >
              <div>
                <label
                  style={{
                    display: "block",
                    marginBottom: "5px",
                    fontWeight: "bold",
                  }}
                >
                  Layout Algorithm:
                </label>
                <select
                  style={{
                    width: "100%",
                    padding: "8px",
                    border: "1px solid var(--border-muted)",
                    borderRadius: "4px",
                  }}
                >
                  <option>Spring Layout</option>
                  <option>Circular Layout</option>
                  <option>Hierarchical Layout</option>
                  <option>Force-Directed</option>
                  <option>Grid Layout</option>
                </select>
              </div>
              <div>
                <label
                  style={{
                    display: "block",
                    marginBottom: "5px",
                    fontWeight: "bold",
                  }}
                >
                  Color Scheme:
                </label>
                <select
                  style={{
                    width: "100%",
                    padding: "8px",
                    border: "1px solid var(--border-muted)",
                    borderRadius: "4px",
                  }}
                >
                  <option>By Page Type</option>
                  <option>By Link Depth</option>
                  <option>By Response Time</option>
                  <option>By Content Size</option>
                  <option>By Status Code</option>
                </select>
              </div>
              <div>
                <label
                  style={{
                    display: "block",
                    marginBottom: "5px",
                    fontWeight: "bold",
                  }}
                >
                  Node Size:
                </label>
                <select
                  style={{
                    width: "100%",
                    padding: "8px",
                    border: "1px solid var(--border-muted)",
                    borderRadius: "4px",
                  }}
                >
                  <option>By Incoming Links</option>
                  <option>By Outgoing Links</option>
                  <option>By Content Length</option>
                  <option>Uniform Size</option>
                </select>
              </div>
              <div>
                <label
                  style={{
                    display: "block",
                    marginBottom: "5px",
                    fontWeight: "bold",
                  }}
                >
                  View Mode:
                </label>
                <select
                  style={{
                    width: "100%",
                    padding: "8px",
                    border: "1px solid var(--border-muted)",
                    borderRadius: "4px",
                  }}
                >
                  <option>2D View</option>
                  <option>3D View</option>
                </select>
              </div>
            </div>
          </div>

          {/* Visualization Canvas */}
          <div
            style={{
              border: "1px solid var(--border-muted)",
              borderRadius: "8px",
              height: "500px",
              backgroundColor: "#f8f9fa",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              fontSize: "18px",
              color: "var(--text-muted)",
              marginBottom: "30px",
            }}
          >
            📊 Interactive Site Map Visualization
            <br />
            <small>D3.js/Three.js visualization would render here</small>
          </div>

          {/* Site Statistics */}
          <div
            style={{
              backgroundColor: "rgba(40, 167, 69, 0.1)",
              padding: "20px",
              borderRadius: "8px",
              border: "1px solid var(--steel-color)"
            }}
          >
            <h3>📊 Site Statistics</h3>
            <div
              style={{
                display: "grid",
                gridTemplateColumns: "repeat(auto-fit, minmax(150px, 1fr))",
                gap: "15px",
              }}
            >
              {[
                { label: "Total Pages", value: "0" },
                { label: "Max Depth", value: "0" },
                { label: "Unique Domains", value: "0" },
                { label: "Total Links", value: "0" },
                { label: "Images Found", value: "0" },
                { label: "Forms Found", value: "0" },
                { label: "Scripts Found", value: "0" },
                { label: "External Links", value: "0" },
              ].map((stat) => (
                <div
                  key={stat.label}
                  style={{
                    padding: "15px",
                    border: "1px solid #c3e6cb",
                    borderRadius: "8px",
                    
                    textAlign: "center",
                  }}
                >
                  <div
                    style={{
                      fontSize: "2em",
                      fontWeight: "bold",
                      color: "#155724",
                    }}
                  >
                    {stat.value}
                  </div>
                  <div style={{ fontSize: "14px", color: "var(--text-muted)" }}>
                    {stat.label}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Database Tab */}
      {currentTab === "database" && (
        <DatabaseManagement token={token} />
      )}

      {/* AI Analytics Tab - Phase 4 Implementation */}
      {currentTab === "ai-analytics" && (
        <div>
          <h2 style={{ color: "var(--metal-silver)", marginBottom: "20px" }}>
            🤖 AI Analytics Dashboard - Phase 4
          </h2>

          {/* AI Service Status */}
          <div
            style={{
              backgroundColor: "#e8f5e8",
              padding: "20px",
              borderRadius: "8px",
              marginBottom: "20px",
            }}
          >
            <h3>🔋 AI Service Status</h3>
            {aiServiceStatus ? (
              <div style={{ display: "grid", gridTemplateColumns: "repeat(auto-fit, minmax(200px, 1fr))", gap: "15px" }}>
                <div className="cyber-glass" style={{ padding: "10px", borderRadius: "5px" }}>
                  <strong>Service Available:</strong> {aiServiceStatus.ai_service_available ? "✅ Yes" : "❌ No"}
                </div>
                <div className="cyber-glass" style={{ padding: "10px", borderRadius: "5px" }}>
                  <strong>Content Clustering:</strong> {aiServiceStatus.capabilities?.content_clustering ? "✅ Available" : "❌ Not Available"}
                </div>
                <div className="cyber-glass" style={{ padding: "10px", borderRadius: "5px" }}>
                  <strong>Predictive Analytics:</strong> {aiServiceStatus.capabilities?.predictive_analytics ? "✅ Available" : "❌ Not Available"}
                </div>
                <div className="cyber-glass" style={{ padding: "10px", borderRadius: "5px" }}>
                  <strong>Real-time Monitoring:</strong> {aiServiceStatus.capabilities?.real_time_monitoring ? "✅ Available" : "❌ Not Available"}
                </div>
              </div>
            ) : (
              <div>Loading AI service status...</div>
            )}
          </div>

          {/* AI Analysis Tools */}
          <div
            style={{
              
              padding: "20px",
              borderRadius: "8px",
              marginBottom: "20px",
            }}
          >
            <h3>🧠 AI Analysis Tools</h3>
            <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: "20px", marginBottom: "20px" }}>
              <div>
                <h4>📊 Content Clustering</h4>
                <p>Automatically group similar content using K-means clustering and NLP techniques.</p>
                <button
                  style={{
                    padding: "10px 20px",
                    backgroundColor: "#17a2b8",
                    color: "white",
                    border: "none",
                    borderRadius: "4px",
                    cursor: "pointer",
                  }}
                  onClick={() => {
                    if (jobResults?.data) {
                      analyzeDataWithAI(jobResults.data.slice(0, 100), "clustering");
                    } else {
                      alert("Please select a job with results first from the Operations tab");
                    }
                  }}
                  disabled={isAiAnalyzing}
                >
                  {isAiAnalyzing ? "Analyzing..." : "Analyze Content"}
                </button>
              </div>
              <div>
                <h4>🔮 Predictive Analytics</h4>
                <p>Predict patterns and trends in scraped data using machine learning.</p>
                <button
                  style={{
                    padding: "10px 20px",
                    backgroundColor: "#28a745",
                    color: "white",
                    border: "none",
                    borderRadius: "4px",
                    cursor: "pointer",
                  }}
                  onClick={() => {
                    if (jobResults?.data) {
                      analyzeDataWithAI(jobResults.data.slice(0, 100), "predictive");
                    } else {
                      alert("Please select a job with results first from the Operations tab");
                    }
                  }}
                  disabled={isAiAnalyzing}
                >
                  {isAiAnalyzing ? "Predicting..." : "Run Predictions"}
                </button>
              </div>
            </div>
            <div>
              <h4>🔍 Anomaly Detection</h4>
              <p>Identify unusual patterns or outliers in your scraped data.</p>
              <button
                style={{
                  padding: "10px 20px",
                  backgroundColor: "#dc3545",
                  color: "white",
                  border: "none",
                  borderRadius: "4px",
                  cursor: "pointer",
                }}
                onClick={() => {
                  if (jobResults?.data) {
                    analyzeDataWithAI(jobResults.data.slice(0, 100), "anomaly");
                  } else {
                    alert("Please select a job with results first from the Operations tab");
                  }
                }}
                disabled={isAiAnalyzing}
              >
                {isAiAnalyzing ? "Detecting..." : "Detect Anomalies"}
              </button>
            </div>
          </div>

          {/* AI Analysis Results */}
          {aiAnalysisResults && (
            <div
              style={{
                backgroundColor: "rgba(23, 162, 184, 0.1)",
                padding: "20px",
                borderRadius: "8px",
                marginBottom: "20px",
                border: "1px solid var(--steel-color)"
              }}
            >
              <h3>📋 Analysis Results</h3>
              <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: "20px" }}>
                <div>
                  <h4>Analysis Summary</h4>
                  <p><strong>Analysis ID:</strong> {aiAnalysisResults.analysis_id}</p>
                  <p><strong>Processing Time:</strong> {aiAnalysisResults.processing_time}s</p>
                  <p><strong>Data Points Analyzed:</strong> {aiAnalysisResults.summary?.total_records || 0}</p>
                </div>
                <div>
                  <h4>Key Insights</h4>
                  {aiAnalysisResults.insights && (
                    <div style={{  padding: "10px", borderRadius: "5px" }}>
                      <p><strong>Content Categories:</strong> {aiAnalysisResults.insights.content_categories?.length || 0}</p>
                      <p><strong>Quality Score:</strong> {aiAnalysisResults.insights.overall_quality_score?.toFixed(2) || "N/A"}</p>
                      <p><strong>Data Completeness:</strong> {aiAnalysisResults.insights.data_completeness?.toFixed(1) || "N/A"}%</p>
                    </div>
                  )}
                </div>
              </div>
              
              {aiAnalysisResults.recommendations && aiAnalysisResults.recommendations.length > 0 && (
                <div style={{ marginTop: "15px" }}>
                  <h4>🎯 AI Recommendations</h4>
                  <ul>
                    {aiAnalysisResults.recommendations.map((rec: any, index: number) => (
                      <li key={index} style={{ marginBottom: "10px" }}>
                        <strong>{rec.type}:</strong> {rec.description}
                        {rec.priority && <span style={{ color: "#dc3545" }}> (Priority: {rec.priority})</span>}
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          )}

          {/* Real-time AI Dashboard */}
          <div
            style={{
              backgroundColor: "rgba(220, 53, 69, 0.1)",
              padding: "20px",
              borderRadius: "8px",
              marginBottom: "20px",
              border: "1px solid var(--steel-color)"
            }}
          >
            <h3>📊 Real-time AI Monitoring</h3>
            {aiDashboardData ? (
              <div>
                <div style={{ display: "grid", gridTemplateColumns: "repeat(auto-fit, minmax(200px, 1fr))", gap: "15px", marginBottom: "20px" }}>
                  <div style={{ padding: "15px", borderRadius: "5px", textAlign: "center" }}>
                    <div style={{ fontSize: "2em", fontWeight: "bold", color: "var(--metal-silver)" }}>
                      {aiDashboardData.ai_service_stats?.analyses_completed || 0}
                    </div>
                    <div>Analyses Completed</div>
                  </div>
                  <div style={{ padding: "15px", borderRadius: "5px", textAlign: "center" }}>
                    <div style={{ fontSize: "2em", fontWeight: "bold", color: "var(--metal-gold)" }}>
                      {aiDashboardData.ai_service_stats?.avg_processing_time?.toFixed(2) || 0}s
                    </div>
                    <div>Avg Processing Time</div>
                  </div>
                  <div style={{ padding: "15px", borderRadius: "5px", textAlign: "center" }}>
                    <div style={{ fontSize: "2em", fontWeight: "bold", color: "#ffc107" }}>
                      {aiDashboardData.ai_service_stats?.recommendations_generated || 0}
                    </div>
                    <div>Recommendations Generated</div>
                  </div>
                </div>
                
                {aiDashboardData.dashboard?.active_monitors && (
                  <div style={{  padding: "15px", borderRadius: "5px" }}>
                    <h4>🔔 Active Monitoring Alerts</h4>
                    <p>Active Monitors: {aiDashboardData.dashboard.active_monitors}</p>
                    <p>Last Update: {new Date().toLocaleTimeString()}</p>
                  </div>
                )}
              </div>
            ) : (
              <div>Loading real-time AI dashboard...</div>
            )}
          </div>

          {/* AI Recommendations */}
          {aiRecommendations.length > 0 && (
            <div
              style={{
                backgroundColor: "rgba(40, 167, 69, 0.1)",
                padding: "20px",
                borderRadius: "8px",
                marginBottom: "20px",
                border: "1px solid var(--steel-color)"
              }}
            >
              <h3>💡 AI Recommendations</h3>
              <div style={{ display: "grid", gap: "10px" }}>
                {aiRecommendations.map((rec: any, index: number) => (
                  <div key={index} style={{ padding: "15px", borderRadius: "5px", border: "1px solid #c3e6cb" }}>
                    <h4 style={{ margin: "0 0 10px 0", color: "#155724" }}>{rec.title}</h4>
                    <p style={{ margin: "0 0 10px 0" }}>{rec.description}</p>
                    <div style={{ fontSize: "14px", color: "var(--text-muted)" }}>
                      <span style={{ marginRight: "15px" }}><strong>Priority:</strong> {rec.priority}</span>
                      <span style={{ marginRight: "15px" }}><strong>Type:</strong> {rec.type}</span>
                      {rec.impact && <span><strong>Impact:</strong> {rec.impact}</span>}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Quick AI Actions */}
          <div
            style={{
              backgroundColor: "rgba(113, 121, 126, 0.2)",
              padding: "20px",
              borderRadius: "8px",
              border: "1px solid var(--steel-color)"
            }}
          >
            <h3>⚡ Quick AI Actions</h3>
            <div style={{ display: "grid", gridTemplateColumns: "repeat(auto-fit, minmax(200px, 1fr))", gap: "15px" }}>
              <button
                style={{
                  padding: "15px",
                  backgroundColor: "#6f42c1",
                  color: "white",
                  border: "none",
                  borderRadius: "4px",
                  cursor: "pointer",
                }}
                onClick={fetchAiRecommendations}
              >
                🔄 Refresh Recommendations
              </button>
              <button
                style={{
                  padding: "15px",
                  backgroundColor: "#fd7e14",
                  color: "white",
                  border: "none",
                  borderRadius: "4px",
                  cursor: "pointer",
                }}
                onClick={fetchAiDashboard}
              >
                📊 Update Dashboard
              </button>
              <button
                style={{
                  padding: "15px",
                  backgroundColor: "#20c997",
                  color: "white",
                  border: "none",
                  borderRadius: "4px",
                  cursor: "pointer",
                }}
                onClick={() => {
                  if (jobs.length > 0) {
                    const latestJob = jobs[0];
                    generateAiInsights(latestJob.id).then((insights) => {
                      if (insights) {
                        alert(`Generated insights for job ${latestJob.name}`);
                      }
                    });
                  } else {
                    alert("No jobs available for insights generation");
                  }
                }}
              >
                🧠 Generate Insights
              </button>
              <button
                style={{
                  padding: "15px",
                  backgroundColor: "#dc3545",
                  color: "white",
                  border: "none",
                  borderRadius: "4px",
                  cursor: "pointer",
                }}
                onClick={() => {
                  setAiAnalysisResults(null);
                  setAiRecommendations([]);
                  alert("AI analytics data cleared");
                }}
              >
                🗑️ Clear Results
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Global Results Modal */}
      {jobResults && (
        <div style={{
          position: "fixed",
          top: "0",
          left: "0",
          right: "0",
          bottom: "0",
          backgroundColor: "rgba(0,0,0,0.5)",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          zIndex: 9999
        }}>
          <div style={{
            background: "white",
            padding: "20px",
            borderRadius: "8px",
            maxWidth: "800px",
            width: "90%",
            maxHeight: "80vh",
            overflow: "auto"
          }}>
            <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: "20px" }}>
              <h2>Job Results: {jobResults.job_name}</h2>
              <button 
                onClick={() => setJobResults(null)}
                style={{
                  padding: "8px 16px",
                  backgroundColor: "#dc3545",
                  color: "white",
                  border: "none",
                  borderRadius: "4px",
                  cursor: "pointer"
                }}
              >
                ✕ Close
              </button>
            </div>
            <p><strong>Total Records:</strong> {jobResults.total_count}</p>
            <p><strong>Status:</strong> {jobResults.status}</p>
            {jobResults.completed_at && (
              <p><strong>Completed:</strong> {new Date(jobResults.completed_at).toLocaleString()}</p>
            )}
            
            <div style={{ marginTop: "20px" }}>
              {jobResults.data && jobResults.data.length > 0 ? (
                <div>
                  <h3>Sample Data (First 5 records):</h3>
                  {jobResults.data.slice(0, 5).map((item: any, index: number) => (
                    <div key={index} style={{
                      border: "1px solid #ddd",
                      padding: "10px",
                      margin: "10px 0",
                      borderRadius: "4px",
                      backgroundColor: "#f9f9f9"
                    }}>
                      <strong>Record {index + 1}:</strong>
                      <pre style={{ fontSize: "12px", marginTop: "5px", whiteSpace: "pre-wrap" }}>
                        {JSON.stringify(item, null, 2)}
                      </pre>
                    </div>
                  ))}
                  {jobResults.data.length > 5 && (
                    <p style={{ fontStyle: "italic", color: "#666" }}>
                      ... and {jobResults.data.length - 5} more records
                    </p>
                  )}
                </div>
              ) : (
                <p>No data available</p>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default App;
