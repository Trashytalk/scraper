import React, { useState } from "react";

interface OperationsProps {
  jobs: any[];
  newJob: any;
  setNewJob: (job: any) => void;
  operationsConfig: any;
  updateOperationsConfig: (updates: any) => void;
  toggleSection: (section: string) => void;
  configPanelOpen: boolean;
  toggleConfigPanel: () => void;
  workflowSidebarOpen: boolean;
  setWorkflowSidebarOpen: (open: boolean) => void;
  selectedJobForWorkflow: any;
  setSelectedJobForWorkflow: (job: any) => void;
  isSubmitting: boolean;
  createJob: (e: React.FormEvent) => void;
  fetchJobs: () => void;
  getJobDetails: (id: number) => void;
  getJobResults: (id: number) => void;
  startJob: (id: number) => void;
  resetOperationsConfig: () => void;
}

const OperationsInterface: React.FC<OperationsProps> = ({
  jobs,
  newJob,
  setNewJob,
  operationsConfig,
  updateOperationsConfig,
  toggleSection,
  configPanelOpen,
  toggleConfigPanel,
  workflowSidebarOpen,
  setWorkflowSidebarOpen,
  selectedJobForWorkflow,
  setSelectedJobForWorkflow,
  isSubmitting,
  createJob,
  fetchJobs,
  getJobDetails,
  getJobResults,
  startJob,
  resetOperationsConfig,
}) => {
  const [activeJobType, setActiveJobType] = useState("crawling");

  // Helper function to update job configuration
  const updateJobConfig = (key: string, value: any) => {
    setNewJob({
      ...newJob,
      config: {
        ...newJob.config,
        [key]: value,
      },
    });
  };

  return (
    <div>
      {/* Operations Header with Configuration */}
      <div
        style={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          marginBottom: "30px",
          padding: "20px",
          backgroundColor: "#f8f9fa",
          borderRadius: "8px",
          border: "1px solid #dee2e6",
        }}
      >
        <div>
          <h2 style={{ margin: "0 0 10px 0" }}>‚öôÔ∏è Unified Operations Center</h2>
          <p style={{ margin: 0, color: "#666" }}>
            Seamlessly manage crawling, scraping, analysis, and data workflows
          </p>
        </div>
        <div style={{ display: "flex", gap: "10px", alignItems: "center" }}>
          <button
            onClick={() => fetchJobs()}
            style={{
              padding: "8px 16px",
              backgroundColor: "#17a2b8",
              color: "white",
              border: "none",
              borderRadius: "4px",
              cursor: "pointer",
            }}
          >
            üîÑ Refresh
          </button>
          <button
            onClick={toggleConfigPanel}
            style={{
              padding: "8px 16px",
              backgroundColor: configPanelOpen ? "#dc3545" : "#6c757d",
              color: "white",
              border: "none",
              borderRadius: "4px",
              cursor: "pointer",
            }}
          >
            {configPanelOpen ? "‚úï Close Config" : "‚öôÔ∏è Configure"}
          </button>
        </div>
      </div>
      {/* Configuration Panel */}
      {configPanelOpen && (
        <div
          style={{
            position: "fixed",
            top: "0",
            right: configPanelOpen ? "0" : "-400px",
            width: "400px",
            height: "100vh",
            backgroundColor: "white",
            boxShadow: "-2px 0 10px rgba(0,0,0,0.1)",
            zIndex: 1000,
            padding: "20px",
            overflowY: "auto",
            transition: "right 0.3s ease",
          }}
        >
          <div
            style={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              marginBottom: "20px",
            }}
          >
            <h3>‚öôÔ∏è Operations Configuration</h3>
            <button
              onClick={toggleConfigPanel}
              style={{
                background: "none",
                border: "none",
                fontSize: "18px",
                cursor: "pointer",
              }}
            >
              ‚úï
            </button>
          </div>

          <div style={{ marginBottom: "20px" }}>
            <h4>Section Visibility</h4>
            {Object.entries({
              showJobCreation: "Job Creation",
              showJobQueue: "Job Queue & Monitoring",
              showCrawler: "Crawler Integration",
              showProgress: "Progress Tracking",
              showResults: "Results & Analysis",
            }).map(([key, label]) => (
              <label
                key={key}
                style={{
                  display: "flex",
                  alignItems: "center",
                  marginBottom: "10px",
                }}
              >
                <input
                  type="checkbox"
                  checked={
                    operationsConfig[
                      key as keyof typeof operationsConfig
                    ] as boolean
                  }
                  onChange={(e) =>
                    updateOperationsConfig({ [key]: e.target.checked })
                  }
                  style={{ marginRight: "10px" }}
                />
                {label}
              </label>
            ))}
          </div>

          <div style={{ marginBottom: "20px" }}>
            <h4>Workflow Features</h4>
            {Object.entries({
              autoWorkflow: "Auto Crawl ‚Üí Scrape Chain",
              collectImages: "Collect Images",
              crawlKeywords: "Keyword-based Crawling",
              retainData: "Auto-retain Results",
            }).map(([key, label]) => (
              <label
                key={key}
                style={{
                  display: "flex",
                  alignItems: "center",
                  marginBottom: "10px",
                }}
              >
                <input
                  type="checkbox"
                  checked={
                    operationsConfig[
                      key as keyof typeof operationsConfig
                    ] as boolean
                  }
                  onChange={(e) =>
                    updateOperationsConfig({ [key]: e.target.checked })
                  }
                  style={{ marginRight: "10px" }}
                />
                {label}
              </label>
            ))}
          </div>

          <button
            onClick={resetOperationsConfig}
            style={{
              width: "100%",
              padding: "10px",
              backgroundColor: "#dc3545",
              color: "white",
              border: "none",
              borderRadius: "4px",
              cursor: "pointer",
            }}
          >
            üîÑ Reset to Defaults
          </button>
        </div>
      )}
      {/* Quick Feature Toggle Bar */}
      <div
        style={{
          display: "flex",
          gap: "10px",
          marginBottom: "20px",
          padding: "15px",
          backgroundColor: "#e9ecef",
          borderRadius: "8px",
          flexWrap: "wrap",
        }}
      >
        <span style={{ fontWeight: "bold", alignSelf: "center" }}>
          Quick Toggles:
        </span>
        {Object.entries({
          autoWorkflow: "üîÑ Auto Chain",
          collectImages: "üì∏ Images",
          crawlKeywords: "üîç Keywords",
          retainData: "üíæ Retain",
        }).map(([key, label]) => (
          <button
            key={key}
            onClick={() =>
              updateOperationsConfig({
                [key]: !operationsConfig[key as keyof typeof operationsConfig],
              })
            }
            style={{
              padding: "6px 12px",
              backgroundColor: operationsConfig[
                key as keyof typeof operationsConfig
              ]
                ? "#28a745"
                : "#6c757d",
              color: "white",
              border: "none",
              borderRadius: "4px",
              cursor: "pointer",
              fontSize: "12px",
            }}
          >
            {label}
          </button>
        ))}
      </div>

      {/* Job Creation Section */}
      <div
        style={{
          marginBottom: "30px",
          border: "1px solid #dee2e6",
          borderRadius: "8px",
          overflow: "hidden",
        }}
      >
        <div
          onClick={() => toggleSection("jobCreation")}
          style={{
            padding: "15px 20px",
            backgroundColor: "#28a745",
            color: "white",
            cursor: "pointer",
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
          }}
        >
          <h3 style={{ margin: 0, fontSize: "16px", fontWeight: "600" }}>
            üöÄ Job Creation & Management
          </h3>
          <span>
            {operationsConfig.expandedSections.jobCreation ? "‚ñº" : "‚ñ∂"}
          </span>
        </div>

        {operationsConfig.expandedSections.jobCreation && (
          <div style={{ padding: "20px" }}>
            <div className="space-y-6 p-4 bg-gray-50 rounded-lg">
          <div className="flex justify-between items-center">
            <h3 className="font-semibold text-gray-800">Create New Job</h3>
            <div className="flex space-x-2">
              <button
                onClick={() => setActiveJobType("crawling")}
                className={`px-3 py-1 rounded text-sm ${
                  activeJobType === "crawling"
                    ? "bg-blue-500 text-white"
                    : "bg-gray-200 text-gray-700"
                }`}
              >
                Crawling
              </button>
              <button
                onClick={() => setActiveJobType("scraping")}
                className={`px-3 py-1 rounded text-sm ${
                  activeJobType === "scraping"
                    ? "bg-blue-500 text-white"
                    : "bg-gray-200 text-gray-700"
                }`}
              >
                Scraping
              </button>
            </div>
          </div>

          <form onSubmit={createJob} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Job Name
                </label>
                <input
                  type="text"
                  value={newJob.name}
                  onChange={(e) =>
                    setNewJob({ ...newJob, name: e.target.value })
                  }
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Enter job name"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Job Type
                </label>
                <select
                  value={newJob.type}
                  onChange={(e) => {
                    setNewJob({ ...newJob, type: e.target.value });
                    setActiveJobType(e.target.value);
                  }}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="crawling">Crawling</option>
                  <option value="scraping">Scraping</option>
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Target URL
              </label>
              <input
                type="url"
                value={newJob.url}
                onChange={(e) => setNewJob({ ...newJob, url: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="https://example.com"
                required
              />
            </div>

            {activeJobType === "crawling" && (
              <div className="space-y-4 p-4 bg-blue-50 rounded-lg">
                <h4 className="font-medium text-blue-800">
                  Crawling Configuration
                </h4>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Target Keywords
                    </label>
                    <input
                      type="text"
                      value={newJob.config?.keywords || ""}
                      onChange={(e) =>
                        updateJobConfig("keywords", e.target.value)
                      }
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="keyword1, keyword2, keyword3"
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      Comma-separated keywords to search for
                    </p>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Link Depth
                    </label>
                    <select
                      value={newJob.config?.depth || 1}
                      onChange={(e) =>
                        updateJobConfig("depth", parseInt(e.target.value))
                      }
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value={1}>1 level (current page only)</option>
                      <option value={2}>2 levels</option>
                      <option value={3}>3 levels</option>
                      <option value={4}>4 levels</option>
                      <option value={5}>5 levels (maximum)</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Max Pages
                    </label>
                    <input
                      type="number"
                      min="1"
                      max="1000"
                      value={newJob.config?.maxPages || 50}
                      onChange={(e) =>
                        updateJobConfig("maxPages", parseInt(e.target.value))
                      }
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Crawl Delay (seconds)
                    </label>
                    <input
                      type="number"
                      min="0"
                      step="0.5"
                      value={newJob.config?.delay || 1}
                      onChange={(e) =>
                        updateJobConfig("delay", parseFloat(e.target.value))
                      }
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Link Patterns (Optional)
                  </label>
                  <input
                    type="text"
                    value={newJob.config?.linkPatterns || ""}
                    onChange={(e) =>
                      updateJobConfig("linkPatterns", e.target.value)
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="/products/, /blog/, /news/"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Only follow links matching these patterns
                  </p>
                </div>

                <div className="flex items-center space-x-4">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={newJob.config?.respectRobots || true}
                      onChange={(e) =>
                        updateJobConfig("respectRobots", e.target.checked)
                      }
                      className="mr-2"
                    />
                    <span className="text-sm text-gray-700">
                      Respect robots.txt
                    </span>
                  </label>

                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={newJob.config?.followRedirects || true}
                      onChange={(e) =>
                        updateJobConfig("followRedirects", e.target.checked)
                      }
                      className="mr-2"
                    />
                    <span className="text-sm text-gray-700">
                      Follow redirects
                    </span>
                  </label>
                </div>
              </div>
            )}

            {activeJobType === "scraping" && (
              <div className="space-y-4 p-4 bg-green-50 rounded-lg">
                <h4 className="font-medium text-green-800">
                  Scraping Configuration
                </h4>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Target Selectors
                    </label>
                    <textarea
                      value={newJob.config?.selectors || ""}
                      onChange={(e) =>
                        updateJobConfig("selectors", e.target.value)
                      }
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      rows={3}
                      placeholder="h1, .title, #content, .price"
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      CSS selectors to extract content
                    </p>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Data Attributes
                    </label>
                    <textarea
                      value={newJob.config?.attributes || ""}
                      onChange={(e) =>
                        updateJobConfig("attributes", e.target.value)
                      }
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      rows={3}
                      placeholder="href, src, data-price, alt"
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      HTML attributes to extract
                    </p>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Wait Time (seconds)
                    </label>
                    <input
                      type="number"
                      min="0"
                      step="0.5"
                      value={newJob.config?.waitTime || 2}
                      onChange={(e) =>
                        updateJobConfig("waitTime", parseFloat(e.target.value))
                      }
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      Wait for dynamic content
                    </p>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Retry Attempts
                    </label>
                    <input
                      type="number"
                      min="0"
                      max="10"
                      value={newJob.config?.retries || 3}
                      onChange={(e) =>
                        updateJobConfig("retries", parseInt(e.target.value))
                      }
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                </div>

                <div className="flex items-center space-x-4">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={newJob.config?.scrapeImages || false}
                      onChange={(e) =>
                        updateJobConfig("scrapeImages", e.target.checked)
                      }
                      className="mr-2"
                    />
                    <span className="text-sm text-gray-700">
                      Scrape all images
                    </span>
                  </label>

                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={newJob.config?.followPagination || false}
                      onChange={(e) =>
                        updateJobConfig("followPagination", e.target.checked)
                      }
                      className="mr-2"
                    />
                    <span className="text-sm text-gray-700">
                      Follow pagination
                    </span>
                  </label>

                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={newJob.config?.extractTables || false}
                      onChange={(e) =>
                        updateJobConfig("extractTables", e.target.checked)
                      }
                      className="mr-2"
                    />
                    <span className="text-sm text-gray-700">
                      Extract tables
                    </span>
                  </label>
                </div>

                {newJob.config?.scrapeImages && (
                  <div className="p-3 bg-yellow-50 rounded border-l-4 border-yellow-400">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Image Selectors
                        </label>
                        <input
                          type="text"
                          value={newJob.config?.imageSelectors || "img"}
                          onChange={(e) =>
                            updateJobConfig("imageSelectors", e.target.value)
                          }
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="img, .gallery img, [data-src]"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Min Image Size (KB)
                        </label>
                        <input
                          type="number"
                          min="0"
                          value={newJob.config?.minImageSize || 10}
                          onChange={(e) =>
                            updateJobConfig(
                              "minImageSize",
                              parseInt(e.target.value),
                            )
                          }
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}

            <div className="flex justify-end space-x-3 pt-4 border-t">
              <button
                type="button"
                onClick={resetOperationsConfig}
                className="px-4 py-2 text-gray-600 bg-gray-100 hover:bg-gray-200 rounded-md transition-colors"
              >
                Reset
              </button>
              <button
                type="submit"
                disabled={isSubmitting}
                className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50"
              >
                {isSubmitting ? "Creating..." : "Create Job"}
              </button>
            </div>
          </form>
          </div>
        )}
      </div>
      {/* Job Queue & Monitoring Section */}
      {operationsConfig.showQueue && (
        <div
          style={{
            marginBottom: "30px",
            border: "1px solid #dee2e6",
            borderRadius: "8px",
            overflow: "hidden",
          }}
        >
          <div
            onClick={() => toggleSection("jobQueue")}
            style={{
              padding: "15px 20px",
              backgroundColor: "#17a2b8",
              color: "white",
              cursor: "pointer",
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
            }}
          >
            <h3 style={{ margin: 0 }}>
              üìä Job Queue & Monitoring ({jobs.length} jobs)
            </h3>
            <span>
              {operationsConfig.expandedSections.queue ? "‚ñº" : "‚ñ∂"}
            </span>
          </div>

          {operationsConfig.expandedSections.queue && (
            <div style={{ padding: "20px" }}>
              <div
                style={{
                  marginBottom: "20px",
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                }}
              >
                <h4 style={{ margin: 0 }}>Job Management</h4>
                <button
                  onClick={fetchJobs}
                  style={{
                    padding: "8px 16px",
                    backgroundColor: "#007bff",
                    color: "white",
                    border: "none",
                    borderRadius: "4px",
                    cursor: "pointer",
                    fontSize: "14px",
                  }}
                >
                  üîÑ Refresh Jobs
                </button>
              </div>

              {/* Job Statistics */}
              <div
                style={{
                  display: "grid",
                  gridTemplateColumns: "repeat(auto-fit, minmax(200px, 1fr))",
                  gap: "15px",
                  marginBottom: "20px",
                }}
              >
                <div
                  style={{
                    padding: "15px",
                    backgroundColor: "#e3f2fd",
                    borderRadius: "8px",
                    textAlign: "center",
                  }}
                >
                  <div
                    style={{
                      fontSize: "24px",
                      fontWeight: "bold",
                      color: "#1976d2",
                    }}
                  >
                    {jobs.filter((j) => j.status === "pending").length}
                  </div>
                  <div style={{ fontSize: "14px", color: "#666" }}>Pending</div>
                </div>
                <div
                  style={{
                    padding: "15px",
                    backgroundColor: "#fff3e0",
                    borderRadius: "8px",
                    textAlign: "center",
                  }}
                >
                  <div
                    style={{
                      fontSize: "24px",
                      fontWeight: "bold",
                      color: "#f57c00",
                    }}
                  >
                    {jobs.filter((j) => j.status === "running").length}
                  </div>
                  <div style={{ fontSize: "14px", color: "#666" }}>Running</div>
                </div>
                <div
                  style={{
                    padding: "15px",
                    backgroundColor: "#e8f5e8",
                    borderRadius: "8px",
                    textAlign: "center",
                  }}
                >
                  <div
                    style={{
                      fontSize: "24px",
                      fontWeight: "bold",
                      color: "#388e3c",
                    }}
                  >
                    {jobs.filter((j) => j.status === "completed").length}
                  </div>
                  <div style={{ fontSize: "14px", color: "#666" }}>
                    Completed
                  </div>
                </div>
                <div
                  style={{
                    padding: "15px",
                    backgroundColor: "#ffebee",
                    borderRadius: "8px",
                    textAlign: "center",
                  }}
                >
                  <div
                    style={{
                      fontSize: "24px",
                      fontWeight: "bold",
                      color: "#d32f2f",
                    }}
                  >
                    {jobs.filter((j) => j.status === "failed").length}
                  </div>
                  <div style={{ fontSize: "14px", color: "#666" }}>Failed</div>
                </div>
              </div>

              {/* Quick Actions */}
              <div
                style={{
                  marginBottom: "20px",
                  display: "flex",
                  gap: "10px",
                  flexWrap: "wrap",
                }}
              >
                <button
                  onClick={() => {
                    const pendingJobs = jobs.filter(
                      (j) => j.status === "pending",
                    );
                    if (pendingJobs.length > 0) {
                      pendingJobs.forEach((job) => startJob(job.id));
                    }
                  }}
                  disabled={
                    jobs.filter((j) => j.status === "pending").length === 0
                  }
                  style={{
                    padding: "8px 16px",
                    backgroundColor:
                      jobs.filter((j) => j.status === "pending").length === 0
                        ? "#ccc"
                        : "#28a745",
                    color: "white",
                    border: "none",
                    borderRadius: "4px",
                    cursor:
                      jobs.filter((j) => j.status === "pending").length === 0
                        ? "not-allowed"
                        : "pointer",
                    fontSize: "14px",
                  }}
                >
                  ‚ñ∂Ô∏è Start All Pending (
                  {jobs.filter((j) => j.status === "pending").length})
                </button>
                <button
                  onClick={() => {
                    const failedJobs = jobs.filter(
                      (j) => j.status === "failed",
                    );
                    if (failedJobs.length > 0) {
                      failedJobs.forEach((job) => startJob(job.id));
                    }
                  }}
                  disabled={
                    jobs.filter((j) => j.status === "failed").length === 0
                  }
                  style={{
                    padding: "8px 16px",
                    backgroundColor:
                      jobs.filter((j) => j.status === "failed").length === 0
                        ? "#ccc"
                        : "#dc3545",
                    color: "white",
                    border: "none",
                    borderRadius: "4px",
                    cursor:
                      jobs.filter((j) => j.status === "failed").length === 0
                        ? "not-allowed"
                        : "pointer",
                    fontSize: "14px",
                  }}
                >
                  üîÑ Retry Failed (
                  {jobs.filter((j) => j.status === "failed").length})
                </button>
              </div>

              {/* Jobs List */}
              <div style={{ display: "grid", gap: "15px" }}>
                {jobs.length === 0 ? (
                  <div
                    style={{
                      padding: "40px",
                      textAlign: "center",
                      color: "#666",
                      backgroundColor: "#f8f9fa",
                      borderRadius: "8px",
                      border: "2px dashed #ddd",
                    }}
                  >
                    <div style={{ fontSize: "48px", marginBottom: "10px" }}>
                      üìã
                    </div>
                    <div style={{ fontSize: "18px", marginBottom: "5px" }}>
                      No jobs found
                    </div>
                    <div style={{ fontSize: "14px" }}>
                      Create your first job above to get started
                    </div>
                  </div>
                ) : (
                  jobs.slice(0, 10).map((job) => (
                    <div
                      key={job.id}
                      style={{
                        padding: "20px",
                        border: "1px solid #ddd",
                        borderRadius: "8px",
                        backgroundColor: "#f8f9fa",
                        borderLeft: `4px solid ${
                          job.status === "completed"
                            ? "#28a745"
                            : job.status === "running"
                              ? "#ffc107"
                              : job.status === "failed"
                                ? "#dc3545"
                                : "#6c757d"
                        }`,
                      }}
                    >
                      <div
                        style={{
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "start",
                          marginBottom: "15px",
                        }}
                      >
                        <div>
                          <h4 style={{ margin: "0 0 5px 0" }}>
                            {job.name || `Job ${job.id}`}
                          </h4>
                          <div
                            style={{
                              fontSize: "14px",
                              color: "#666",
                              marginBottom: "5px",
                            }}
                          >
                            ID: {job.id} ‚Ä¢ Type: {job.type || "crawling"} ‚Ä¢
                            Created:{" "}
                            {job.created_at
                              ? new Date(job.created_at).toLocaleString()
                              : "Unknown"}
                          </div>
                          <div style={{ fontSize: "14px", color: "#666" }}>
                            URL: {job.url || "Not specified"} ‚Ä¢ Results:{" "}
                            {job.results_count || 0} data points
                          </div>
                        </div>
                        <div
                          style={{
                            display: "flex",
                            gap: "10px",
                            alignItems: "center",
                          }}
                        >
                          <span
                            style={{
                              padding: "6px 12px",
                              borderRadius: "20px",
                              fontSize: "12px",
                              fontWeight: "bold",
                              backgroundColor:
                                job.status === "completed"
                                  ? "#28a745"
                                  : job.status === "running"
                                    ? "#ffc107"
                                    : job.status === "failed"
                                      ? "#dc3545"
                                      : "#6c757d",
                              color: "white",
                            }}
                          >
                            {job.status || "pending"}
                          </span>
                        </div>
                      </div>

                      <div
                        style={{
                          display: "flex",
                          gap: "10px",
                          flexWrap: "wrap",
                        }}
                      >
                        {(job.status === "pending" ||
                          job.status === "failed") && (
                          <button
                            onClick={() => {
                              console.log(`Starting job ${job.id}`);
                              startJob(job.id);
                            }}
                            style={{
                              padding: "8px 16px",
                              backgroundColor: "#28a745",
                              color: "white",
                              border: "none",
                              borderRadius: "4px",
                              cursor: "pointer",
                              fontSize: "14px",
                            }}
                            onMouseOver={(e) =>
                              ((
                                e.target as HTMLButtonElement
                              ).style.backgroundColor = "#218838")
                            }
                            onMouseOut={(e) =>
                              ((
                                e.target as HTMLButtonElement
                              ).style.backgroundColor = "#28a745")
                            }
                          >
                            ‚ñ∂Ô∏è Start Job
                          </button>
                        )}
                        <button
                          onClick={() => {
                            console.log(`Getting details for job ${job.id}`);
                            getJobDetails(job.id);
                          }}
                          style={{
                            padding: "8px 16px",
                            backgroundColor: "#6c757d",
                            color: "white",
                            border: "none",
                            borderRadius: "4px",
                            cursor: "pointer",
                            fontSize: "14px",
                          }}
                          onMouseOver={(e) =>
                            ((
                              e.target as HTMLButtonElement
                            ).style.backgroundColor = "#5a6268")
                          }
                          onMouseOut={(e) =>
                            ((
                              e.target as HTMLButtonElement
                            ).style.backgroundColor = "#6c757d")
                          }
                        >
                          üìã Details
                        </button>
                        {job.status === "completed" && (
                          <button
                            onClick={() => {
                              console.log(`Getting results for job ${job.id}`);
                              getJobResults(job.id);
                            }}
                            style={{
                              padding: "8px 16px",
                              backgroundColor: "#007bff",
                              color: "white",
                              border: "none",
                              borderRadius: "4px",
                              cursor: "pointer",
                              fontSize: "14px",
                            }}
                            onMouseOver={(e) =>
                              ((
                                e.target as HTMLButtonElement
                              ).style.backgroundColor = "#0056b3")
                            }
                            onMouseOut={(e) =>
                              ((
                                e.target as HTMLButtonElement
                              ).style.backgroundColor = "#007bff")
                            }
                          >
                            üìä View Results
                          </button>
                        )}
                        <button
                          onClick={() => {
                            console.log(`Adding job ${job.id} to workflow`);
                            setSelectedJobForWorkflow(job);
                            setWorkflowSidebarOpen(true);
                          }}
                          style={{
                            padding: "8px 16px",
                            backgroundColor: "#fd7e14",
                            color: "white",
                            border: "none",
                            borderRadius: "4px",
                            cursor: "pointer",
                            fontSize: "14px",
                          }}
                          onMouseOver={(e) =>
                            ((
                              e.target as HTMLButtonElement
                            ).style.backgroundColor = "#e8630a")
                          }
                          onMouseOut={(e) =>
                            ((
                              e.target as HTMLButtonElement
                            ).style.backgroundColor = "#fd7e14")
                          }
                        >
                          üîÑ Add to Workflow
                        </button>
                      </div>
                    </div>
                  ))
                )}
              </div>

              {jobs.length > 10 && (
                <div
                  style={{
                    textAlign: "center",
                    marginTop: "20px",
                    padding: "15px",
                    backgroundColor: "#e9ecef",
                    borderRadius: "8px",
                  }}
                >
                  <p
                    style={{
                      margin: "0 0 10px 0",
                      fontSize: "14px",
                      color: "#666",
                    }}
                  >
                    Showing 10 of {jobs.length} jobs
                  </p>
                  <button
                    onClick={() => {
                      console.log("Fetching all jobs");
                      fetchJobs();
                    }}
                    style={{
                      padding: "8px 16px",
                      backgroundColor: "#007bff",
                      color: "white",
                      border: "none",
                      borderRadius: "4px",
                      cursor: "pointer",
                      fontSize: "14px",
                    }}
                  >
                    üìã View All Jobs
                  </button>
                </div>
              )}
            </div>
          )}
        </div>
      )}
      {/* Workflow Sidebar */}
      {workflowSidebarOpen && selectedJobForWorkflow && (
        <div
          style={{
            position: "fixed",
            top: "0",
            right: "0",
            width: "400px",
            height: "100vh",
            backgroundColor: "white",
            boxShadow: "-2px 0 10px rgba(0,0,0,0.1)",
            zIndex: 1001,
            padding: "20px",
            overflowY: "auto",
          }}
        >
          <div
            style={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              marginBottom: "20px",
            }}
          >
            <h3>üîÑ Post-Collection Workflow</h3>
            <button
              onClick={() => setWorkflowSidebarOpen(false)}
              style={{
                background: "none",
                border: "none",
                fontSize: "18px",
                cursor: "pointer",
              }}
            >
              ‚úï
            </button>
          </div>

          <div style={{ marginBottom: "20px" }}>
            <h4>Job: {selectedJobForWorkflow.name}</h4>
            <p style={{ color: "#666" }}>
              Status: {selectedJobForWorkflow.status}
            </p>
          </div>

          <div style={{ marginBottom: "20px" }}>
            <h4>üìã Workflow Options</h4>
            <div
              style={{ display: "flex", flexDirection: "column", gap: "10px" }}
            >
              <button
                style={{
                  padding: "10px",
                  backgroundColor: "#28a745",
                  color: "white",
                  border: "none",
                  borderRadius: "4px",
                  cursor: "pointer",
                }}
              >
                üíæ Retain Data Permanently
              </button>
              <button
                style={{
                  padding: "10px",
                  backgroundColor: "#17a2b8",
                  color: "white",
                  border: "none",
                  borderRadius: "4px",
                  cursor: "pointer",
                }}
              >
                üìä Generate Analysis Report
              </button>
              <button
                style={{
                  padding: "10px",
                  backgroundColor: "#ff6b35",
                  color: "white",
                  border: "none",
                  borderRadius: "4px",
                  cursor: "pointer",
                }}
              >
                üîÑ Create Follow-up Job
              </button>
              <button
                style={{
                  padding: "10px",
                  backgroundColor: "#6c757d",
                  color: "white",
                  border: "none",
                  borderRadius: "4px",
                  cursor: "pointer",
                }}
              >
                üì§ Export Results
              </button>
              <button
                style={{
                  padding: "10px",
                  backgroundColor: "#dc3545",
                  color: "white",
                  border: "none",
                  borderRadius: "4px",
                  cursor: "pointer",
                }}
              >
                üóëÔ∏è Archive & Clean
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default OperationsInterface;
